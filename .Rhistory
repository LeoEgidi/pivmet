data =list(N=N, k=k, y=y, D=2, mu_0=mu_0,
eta = eta, sigma_d = sigma_d)
mix_biv <- "
data {
int<lower=1> k;          // number of mixture components
int<lower=1> N;          // number of data points
int D;                   // data dimension
matrix[N,D] y;           // observations matrix
vector[D] mu_0;
real<lower=0> eta;
real<lower=0> sigma_d;
}
parameters {
simplex[k] theta;        // mixing proportions
vector[D] mu[k];        // locations of mixture components
cholesky_factor_corr[D] L_Omega;   // scales of mixture components
vector<lower=0>[D] L_sigma;
cholesky_factor_corr[D] L_tau_Omega;   // scales of mixture components
vector<lower=0>[D] L_tau;
}
transformed parameters{
vector[k] log_theta = log(theta);  // cache log calculation
vector[k] pz[N];
simplex[k] exp_pz[N];
matrix[D,D] L_Sigma=diag_pre_multiply(L_sigma, L_Omega);
matrix[D,D] L_Tau=diag_pre_multiply(L_tau, L_tau_Omega);
for (n in 1:N){
pz[n]=   multi_normal_cholesky_lpdf(y[n]|mu, L_Sigma)+
log_theta-
log_sum_exp(multi_normal_cholesky_lpdf(y[n]|
mu, L_Sigma)+
log_theta);
exp_pz[n] = exp(pz[n]);
}
}
model{
L_Omega ~ lkj_corr_cholesky(eta);
L_sigma ~ cauchy(0, sigma_d);
mu ~ multi_normal_cholesky(mu_0, L_Tau);
for (n in 1:N) {
vector[k] lps = log_theta;
for (j in 1:k){
lps[j] += multi_normal_cholesky_lpdf(y[n] |
mu[j], L_Sigma);
target+=pz[n,j];
}
target += log_sum_exp(lps);
}
}
generated quantities{
int<lower=1, upper=k> z[N];
for (n in 1:N){
z[n] = categorical_rng(exp_pz[n]);
}
}
"
fit_biv <-  stan(model_code = mix_biv,
data=data,
chains =chains,
iter =nMC)
printed <- cat(print(fit_biv, pars=c("mu", "theta", "L_Sigma")))
sims_biv <- rstan::extract(fit_biv)
# Extraction
ris <- as.matrix(sims_biv)
# Post- process of the chains----------------------
group <- sims_biv$z
tau <- sims_biv$L_sigma
prob.st <- sims_biv$theta
M <- nrow(group)
mu_pre_switch_compl <- array(rep(0, M*2*k), dim=c(M,2,k))
for (i in 1:M)
mu_pre_switch_compl[i,,] <- t(sims_biv$mu[i,,])
# Discard iterations
numeffettivogruppi <- apply(group,1,FUN = function(x) length(unique(x)))
sm <- sims_biv$mu[numeffettivogruppi==k,,]
true.iter <- dim(sm)[1]
if (sum(numeffettivogruppi==k)==0){
return(print("HMC has not never been able to identify the required number of groups and the process has been interrupted"))
#return(1)
}else{
mu_pre_switch <- array(rep(0, true.iter*2*k), dim=c(true.iter,2,k))
for (i in 1:true.iter)
mu_pre_switch[i,,] <- t(sm[i,,])
}
mcmc_mean_raw = mu_pre_switch_compl
mcmc_weight_raw = prob.st
mcmc_sd_raw = tau
group <- sims_biv$z[numeffettivogruppi==k,]
mu <- mu_pre_switch
tau <- sims_biv$L_sigma[numeffettivogruppi==k, ]
prob.st <- sims_biv$theta[numeffettivogruppi==k,]
FreqGruppiJags <- table(group)
model_code <- mix_biv
}
group.orig <- group
verigruppi <- as.double(names(table(group)))
prob.st <- prob.st[,verigruppi]
mu <- mu[,,verigruppi]
#tau <- tau[,verigruppi]
# Switching Post
cont <- 0
for (l in verigruppi){
cont <- cont+1
group.orig[group==l] <- cont
}
k.orig <- k
if (cont > 1){
k <- cont
}
mu_switch  <- array(rep(0, true.iter*2*k), dim=c(true.iter,2,k))
prob.st_switch <-  array(0, dim=c(true.iter,k))
group <- group*0
z <- array(0,dim=c(N, k, true.iter))
for (i in 1:true.iter){
perm <- sample(1:k,k,replace=FALSE)
for (j in 1:k){
#post-processing
group[i,group.orig[i,]==j] <- perm[j]
}
mu_switch[i,,] <- mu[i,,perm]
prob.st_switch[i,] <- prob.st[i,perm]
}
for (i in 1:true.iter){
for (j in 1:N){
z[j,group[i,j],i] <- 1
}
}
mcmc_mean <- mu_switch
mcmc_sd <- tau
mcmc_weight <- prob.st_switch
}
FreqGruppiJagsPERM <- table(group)
Freq <- cbind(FreqGruppiJags,FreqGruppiJagsPERM)
colnames(Freq) <- c("JAGS raw groups", "JAGS post-processed groups")
# Similarity matrix based on MCMC sampling------------------------
nz <- dim(z)[1]
M <- dim(z)[3]
C <- matrix(1,nz,nz)
zm <- apply(z,c(1,3),FUN=function(x) sum(x*(1:length(x))))
for (i in 1:(nz-1)){
for (j in (i+1):nz){
C[i,j] <- sum(zm[i,]==zm[j,])/M
C[j,i] <- C[i,j]
}
}
matdissim <- 1-C
diag(matdissim) <- 0
# Clustering on dissimilarity matrix-------------
if (missing(clustering)){
#clustering <- "diana"
gr  <- diana(matdissim,diss=TRUE)
grr <- cutree(gr, k)
}else if(clustering =="diana"){
gr  <- diana(matdissim,diss=TRUE)
grr <- cutree(gr, k)
}else if(clustering == "hclust"){
gr  <- hclust(as.dist(matdissim))
grr <- cutree(gr, k)
}
available_met <- 3
piv.criterion.choices <- c("maxsumint", "minsumnoint",
"maxsumdiff")
if (missing(piv.criterion)){
piv.criterion <- "maxsumdiff"
}
if (piv.criterion=="maxsumint"||
piv.criterion=="minsumnoint"||
piv.criterion=="maxsumdiff" ){
piv.index <- (1:3)[piv.criterion.choices==piv.criterion]
piv.index.pivotal <- c(1,2,3)
available_met <- 3
x <- c(1:available_met)
clust  <-  piv_sel(C=C, clusters=as.vector(grr))
pivots <- clust$pivots[,piv.index.pivotal[piv.index]]
}else if(piv.criterion=="MUS"){
if (k <=4 & sum(C==0)!=0){
mus_res    <- MUS(C, grr)
clust  <-  mus_res$pivots
}else{
print("maxsumdiff criterion instead of MUS has been adopted due to
computational efficiency")
clust  <-  piv_sel(C=C,  clusters=as.vector(grr))
pivots <- clust$pivots[,3]
}
}
return(list( true.iter = true.iter,
#z=z,
Mu = mu_inits,
#ris=ris,
groupPost=group,
mcmc_mean = mcmc_mean,
mcmc_sd = mcmc_sd,
mcmc_weight = mcmc_weight,
mcmc_mean_raw = mcmc_mean_raw,
mcmc_sd_raw = mcmc_sd_raw,
mcmc_weight_raw = mcmc_weight_raw,
C=C,
grr=grr,
pivots = pivots,
print = printed,
model = model_code))
}
N   <- 200
k   <- 4
nMC <- 200
M1  <-c(-.5,8)
M2  <- c(25.5,.1)
M3  <- c(49.5,8)
M4  <- c(63.0,.1)
Mu  <- matrix(rbind(M1,M2,M3,M4),c(4,2))
Mu
sds <- cbind(rep(1,k), rep(20,k))
Sigma.p1 <- matrix(c(sds[1,1]^2,0,0,sds[1,1]^2), nrow=2, ncol=2)
Sigma.p2 <- matrix(c(sds[1,2]^2,0,0,sds[1,2]^2), nrow=2, ncol=2)
W <- c(0.2,0.8)
sim <- piv_sim(N = N, k = k, Mu = Mu,
Sigma.p1 = Sigma.p1,
Sigma.p2 = Sigma.p2, W = W)
## rjags (default)
###################################################################
res <- piv_MCMC(y = sim$y, k =k, nMC = nMC, chains = 3)
N   <- 200
k   <- 4
nMC <- 200
M1  <-c(-.5,8)
M2  <- c(25.5,.1)
M3  <- c(49.5,8)
M4  <- c(63.0,.1)
Mu  <- matrix(rbind(M1,M2,M3,M4),c(4,2))
Mu
sds <- cbind(rep(1,k), rep(20,k))
Sigma.p1 <- matrix(c(sds[1,1]^2,0,0,sds[1,1]^2), nrow=2, ncol=2)
Sigma.p2 <- matrix(c(sds[1,2]^2,0,0,sds[1,2]^2), nrow=2, ncol=2)
W <- c(0.2,0.8)
sim <- piv_sim(N = N, k = k, Mu = Mu,
Sigma.p1 = Sigma.p1,
Sigma.p2 = Sigma.p2, W = W)
## rjags (default)
###################################################################
res <- piv_MCMC(y = sim$y, k =k, nMC = nMC, software ="rstan", chains = 3)
data(fish)
y <- fish[,1]
k <- 5
nMC <- 300
res <- piv_MCMC(y = y, k = k, nMC = nMC, software = "rjags")
data(fish)
y <- fish[,1]
k <- 5
nMC <- 300
res <- piv_MCMC(y = y, k = k, nMC = nMC, software = "rstan")
devtools::document()
library(pivmet)
help("piv_MCMC")
help("piv_rel")
devtools::document()
help(piv_sel)
data(iris)
x<- iris[,1:4]
N <- length(iris[,1])
H <- 1000
a <- matrix(NA, H, N)
# Perform H k-means partitions
for (h in 1:H){
a[h,] <- kmeans(x, centers = 3)$cluster
}
# Build the co-association matrix
C <- matrix(1, N,N)
for (i in 1:(N-1)){
for (j in (i+1):N){
C[i,j] <- sum(a[,i]==a[,j])/H
C[j,i] <- C[i,j]
}}
km <- kmeans(x, centers =3)
# Find the pivots according to the three possible pivotal criterion
ris <- piv_sel(C, clusters = km$cluster)
graphics::plot(iris[,1], iris[,2], xlab ="Sepal.Length", ylab= "Sepal.Width",
col = km$cluster)
# Add the pivots according to maxsumdiff criterion
points( x[ris$pivot[,3], c( "Sepal.Length","Sepal.Width" )], col = 1:3,
cex =2, pch = 8 )
help(piv_sel)
devtools::document()
help("piv_MCMC")
help("piv_KMeans")
help(piv_sel)
N   <- 200
k   <- 4
nMC <- 200
M1  <-c(-.5,8)
M2  <- c(25.5,.1)
M3  <- c(49.5,8)
M4  <- c(63.0,.1)
Mu  <- matrix(rbind(M1,M2,M3,M4),c(4,2))
Mu
sds <- cbind(rep(1,k), rep(20,k))
Sigma.p1 <- matrix(c(sds[1,1]^2,0,0,sds[1,1]^2), nrow=2, ncol=2)
Sigma.p2 <- matrix(c(sds[1,2]^2,0,0,sds[1,2]^2), nrow=2, ncol=2)
W <- c(0.2,0.8)
sim <- piv_sim(N = N, k = k, Mu = Mu,
Sigma.p1 = Sigma.p1,
Sigma.p2 = Sigma.p2, W = W)
## rjags (default)
###################################################################
res <- piv_MCMC(y = sim$y, k =k, nMC = nMC, chains = 3)
#place at the beginning
res$true.iter
res$Mu  #not in the help?
res$groupPost
dim(res$mcmc_mean)
dim(res$mcmc_sd)
dim(res$mcmc_weight)
dim(res$mcmc_mean_raw)
dim(res$mcmc_sd_raw)
dim(res$mcmc_weight_raw)
dim(res$C)
res$grr
res$pivots
#
res$model
N   <- 200
k   <- 4
nMC <- 200
M1  <-c(-.5,8)
M2  <- c(25.5,.1)
M3  <- c(49.5,8)
M4  <- c(63.0,.1)
Mu  <- matrix(rbind(M1,M2,M3,M4),c(4,2))
Mu
sds <- cbind(rep(1,k), rep(20,k))
Sigma.p1 <- matrix(c(sds[1,1]^2,0,0,sds[1,1]^2), nrow=2, ncol=2)
Sigma.p2 <- matrix(c(sds[1,2]^2,0,0,sds[1,2]^2), nrow=2, ncol=2)
W <- c(0.2,0.8)
sim <- piv_sim(N = N, k = k, Mu = Mu,
Sigma.p1 = Sigma.p1,
Sigma.p2 = Sigma.p2, W = W)
## rjags (default)
###################################################################
res <- piv_MCMC(y = sim$y, k =k, nMC = nMC, chains = 3)
N  <- 2000
k  <- 3
M1 <- c(-45)
M2 <- c(45)
M3 <- c(100)
Mu <- c(M1,M2,M3)
stdev=cbind(rep(1,k), rep(15, k))
sim <- piv_sim(N = N, k = k, Mu = Mu, stdev=stdev, W = W)
res_univ<- piv_MCMC(y = sim$y, k =k, nMC = nMC)
help(piv_MCMC)
help(MUS)
devtools::document()
setwd("~/GitHub/pivmet")
devtools::load_all(".")
library(pivmet)
devtools::install_github("leoegidi/pivmet")
devtools::install_github("leoegidi/pivmet")
setwd("~/GitHub/pivmet")
library(devtools)
install_github("leoegidi/pivmet")
install.packages("pivmet")
library(pivmet)
install_github("leoegidi/pivmet")
library(pivmet)
help(piv_sel)
devtools::document()
library(pivmet)
devtools::document()
N  <- 200
k  <- 3
nMC <- 2000
M1 <- c(-10,8)
M2 <- c(10,.1)
M3 <- c(30,8)
# matrix of input means
Mu <- matrix(rbind(M1,M2,M3),c(k,2))
sds    <- cbind(rep(1,k), rep(15,k))
# covariance matrices for the two subgroups
Sigma.p1 <- matrix(c(sds[1,1]^2,0,0,sds[1,1]^2),
nrow=2, ncol=2)
Sigma.p2 <- matrix(c(sds[1,2]^2,0,0,sds[1,2]^2),
nrow=2, ncol=2)
# subgroups' weights
W   <- c(0.2,0.8)
# simulate data
sim <- piv_sim(N = N, k = k, Mu = Mu,
Sigma.p1 = Sigma.p1, Sigma.p2 = Sigma.p2, W = W)
res <- piv_MCMC(y = sim$y, k= k, nMC =nMC)
library(pivmet)
library(rstanarm)
help("stan_glmer")
devtools
devtools::check()
devtools::check()
library(pivmet)
devtools::document()
devtools::install_github("leoegidi/pivmet")
devtools::document()
devtools::install_github("leoegidi/pivmet")
devtools::install_github("leoegidi/pivmet")
library(pivmet)
help(piv_sim)
devtools::install_github("leoegidi/pivmet")
devtools::document()
devtools::install_github("leoegidi/pivmet")
library(pivmet)
help(piv_sim)
help(piv_sim)
library(pivmet)
help(piv_sim)
library(pivmet)
help("piv_sim")
devtools::document()
N  <- 2000
k  <- 3
M1 <- c(-45,8)
M2 <- c(45,.1)
M3 <- c(100,8)
Mu <- matrix(rbind(M1,M2,M3),c(k,2))
sds <- cbind(rep(1,k), rep(20,k))
Sigma.p1 <- matrix(c( sds[1,1]^2, 0,0,
sds[1,1]^2), nrow=2, ncol=2)
Sigma.p2 <- matrix(c(sds[1,2]^2, 0,0,
sds[1,2]^2), nrow=2, ncol=2)
W   <- c(0.2,0.8)
sim <- piv_sim(N = N, k = k, Mu = Mu, Sigma.p1 = Sigma.p1,
Sigma.p2 = Sigma.p2, W = W)
graphics::plot(sim$y, xlab="y[,1]", ylab="y[,2]")
help(piv_sel)
data(iris)
# select the columns of variables
x<- iris[,1:4]
N <- nrow(x)
H <- 1000
a <- matrix(NA, H, N)
# Perform H k-means partitions
for (h in 1:H){
a[h,] <- kmeans(x, centers = 3)$cluster
}
# Build the co-association matrix
C <- matrix(1, N,N)
for (i in 1:(N-1)){
for (j in (i+1):N){
C[i,j] <- sum(a[,i]==a[,j])/H
C[j,i] <- C[i,j]
}}
km <- kmeans(x, centers =3)
# Apply three pivotal criteria to the co-association matrix
ris <- piv_sel(C, clusters = km$cluster)
graphics::plot(iris[,1], iris[,2], xlab ="Sepal.Length", ylab= "Sepal.Width",
col = km$cluster)
# Add the pivots chosen by the maxsumdiff criterion
points( x[ris$pivots[,3], 1:2], col = 1:3,
cex =2, pch = 8 )
help("piv_MCMC")
N   <- 200
k   <- 4
nMC <- 1000
M1  <-c(-.5,8)
M2  <- c(25.5,.1)
M3  <- c(49.5,8)
M4  <- c(63.0,.1)
Mu  <- matrix(rbind(M1,M2,M3,M4),c(4,2))
sds <- cbind(rep(1,k), rep(20,k))
Sigma.p1 <- matrix(c(sds[1,1]^2,0,0,sds[1,1]^2), nrow=2, ncol=2)
Sigma.p2 <- matrix(c(sds[1,2]^2,0,0,sds[1,2]^2), nrow=2, ncol=2)
W <- c(0.2,0.8)
sim <- piv_sim(N = N, k = k, Mu = Mu,
Sigma.p1 = Sigma.p1,
Sigma.p2 = Sigma.p2, W = W)
## rjags (default)
res <- piv_MCMC(y = sim$y, k =k, nMC = nMC)
## rstan
res_stan <- piv_MCMC(y = sim$y, k =k, nMC = nMC,
software ="rstan")
# changing priors
res2 <- piv_MCMC(y = sim$y,
priors = list (
mu_0=c(1,1),
S2 = matrix(c(0.002,0,0, 0.1),2,2, byrow=TRUE),
S3 = matrix(c(0.1,0,0,0.1), 2,2, byrow =TRUE)),
k = k, nMC = nMC)
## End(Not run)
### Fishery data (bayesmix package)
## Not run:
data(fish)
y <- fish[,1]
k <- 5
nMC <- 5000
res <- piv_MCMC(y = y, k = k, nMC = nMC)
# changing priors
res2   <- piv_MCMC(y = y,
priors = list(kind = "condconjugate",
parameter = "priorsRaftery",
hierarchical = "tau"),  k =k, nMC = nMC)
devtools::document
devtools::document()
setwd("~/GitHub/pivmet")
devtools::document()
help("piv_rel")
help(MUS)
help("piv_KMeans")
help("MUS")
devtools::document()
library(devtools)
install_github("leoegidi/pivmet")
library(pivmet)
library(pivmet)
help("piv_KMeans")
library(pivmet)
help("piv_KMeans")
help("MUS")
devtools::document()
help("piv_KMeans")
