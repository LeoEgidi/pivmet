}
# Discard iterations
numeffettivogruppi <- apply(group,1,FUN = function(x) length(unique(x)))
ris <- ris[numeffettivogruppi==k,]
true.iter <- nrow(ris)
if (sum(numeffettivogruppi==k)==0){
return(print("MCMC has not never been able to identify the required number of groups and the process has been interrupted"))
}else{
L<-list()
mu_pre_switch <- array(rep(0, true.iter*D*k), dim=c(true.iter,D,k))
for (i in 1:k){
L[[i]] <- ris[,grep(paste("mu[", i, sep=""),
colnames(ris),fixed=TRUE)]
}
for (i in 1:k){
mu_pre_switch[,,i] <- as.matrix(L[[i]])
}
}
group <- ris[,grep("clust[",colnames(ris),fixed=TRUE)]
FreqGruppiJags <- table(group)
model_code <- mod.mist.biv
mcmc_mean_raw = mu_pre_switch_compl
mcmc_weight_raw = prob.st
mcmc_sd_raw = tau
tau <- sqrt( (1/ris[,grep("tau[",colnames(ris),fixed=TRUE)])[,c(1,4)])
prob.st <- ris[,grep("eta[",colnames(ris),fixed=TRUE)]
mu <- mu_pre_switch
}else if(software=="rstan"){
if (missing(priors)){
mu_0 <- rep(0, D)
epsilon <- 1
sigma_d <- 2.5
a_sp <- 1
b_sp <- 200
}else{
if (is.null(priors$mu_0)){
mu_0 <- rep(0, D)
}else{
mu_0 <- priors$mu_0
}
if (is.null(priors$epsilon)){
epsilon <- 1
}else{
epsilon  <- priors$epsilon
}
if (is.null(priors$sigma_d)){
sigma_d <- 2.5
}else{
sigma_d <- priors$sigma_d
}
if (is.null(priors$a_sp)){
a_sp <- 1
}else{
a_sp <- priors$a_sp
}
if (is.null(priors$b_sp)){
b_sp <- 200
}else{
b_sp <- priors$b_sp
}
}
data =list(N=N, k=k, y=y, D=D, mu_0=mu_0,
epsilon = epsilon, sigma_d = sigma_d,
a = a_sp, b=b_sp)
# sparsity
if (sparsity=="FALSE"){
mix_biv <- "
data {
int<lower=1> k;          // number of mixture components
int<lower=1> N;          // number of data points
int D;                   // data dimension
matrix[N,D] y;           // observations matrix
vector[D] mu_0;
real<lower=0> epsilon;
real<lower=0> sigma_d;
}
parameters {
simplex[k] eta;         // mixing proportions
vector[D] mu[k];        // locations of mixture components
cholesky_factor_corr[D] L_Omega;   // scales of mixture components
vector<lower=0>[D] L_sigma;
cholesky_factor_corr[D] L_tau_Omega;   // scales of mixture components
vector<lower=0>[D] L_tau;
}
transformed parameters{
vector[k] log_eta = log(eta);  // cache log calculation
vector[k] pz[N];
simplex[k] exp_pz[N];
matrix[D,D] L_Sigma=diag_pre_multiply(L_sigma, L_Omega);
matrix[D,D] L_Tau=diag_pre_multiply(L_tau, L_tau_Omega);
for (n in 1:N){
pz[n]=   multi_normal_cholesky_lpdf(y[n]|mu, L_Sigma)+
log_eta-
log_sum_exp(multi_normal_cholesky_lpdf(y[n]|
mu, L_Sigma)+
log_eta);
exp_pz[n] = exp(pz[n]);
}
}
model{
L_Omega ~ lkj_corr_cholesky(epsilon);
L_sigma ~ cauchy(0, sigma_d);
mu ~ multi_normal_cholesky(mu_0, L_Tau);
for (n in 1:N) {
vector[k] lps = log_eta;
for (j in 1:k){
lps[j] += multi_normal_cholesky_lpdf(y[n] |
mu[j], L_Sigma);
target+=pz[n,j];
}
target += log_sum_exp(lps);
}
}
generated quantities{
int<lower=1, upper=k> z[N];
for (n in 1:N){
z[n] = categorical_rng(exp_pz[n]);
}
}
"
}else{
mix_biv <- "
data {
int<lower=1> k;          // number of mixture components
int<lower=1> N;          // number of data points
int D;                   // data dimension
matrix[N,D] y;           // observations matrix
vector[D] mu_0;
real<lower=0> epsilon;
real<lower=0> sigma_d;
real<lower=0> a;         // hyper-shape gamma e0
real<lower=0> b;         // hyper-rate gamma e0
}
parameters {
simplex[k] eta;         // mixing proportions
vector[D] mu[k];        // locations of mixture components
cholesky_factor_corr[D] L_Omega;   // scales of mixture components
vector<lower=0>[D] L_sigma;
cholesky_factor_corr[D] L_tau_Omega;   // scales of mixture components
vector<lower=0>[D] L_tau;
real<lower=0> e0;       // dirichlet concentration
}
transformed parameters{
vector[k] log_eta = log(eta);  // cache log calculation
vector<lower=0>[k] alpha = rep_vector(e0, k);
vector[k] pz[N];
simplex[k] exp_pz[N];
matrix[D,D] L_Sigma=diag_pre_multiply(L_sigma, L_Omega);
matrix[D,D] L_Tau=diag_pre_multiply(L_tau, L_tau_Omega);
for (n in 1:N){
pz[n]=   multi_normal_cholesky_lpdf(y[n]|mu, L_Sigma)+
log_eta-
log_sum_exp(multi_normal_cholesky_lpdf(y[n]|
mu, L_Sigma)+
log_eta);
exp_pz[n] = exp(pz[n]);
}
}
model{
L_Omega ~ lkj_corr_cholesky(epsilon);
L_sigma ~ cauchy(0, sigma_d);
mu ~ multi_normal_cholesky(mu_0, L_Tau);
eta ~ dirichlet(alpha);
e0 ~ gamma(a, b);
for (n in 1:N) {
vector[k] lps = log_eta;
for (j in 1:k){
lps[j] += multi_normal_cholesky_lpdf(y[n] |
mu[j], L_Sigma);
target+=pz[n,j];
}
target += log_sum_exp(lps);
}
}
generated quantities{
int<lower=1, upper=k> z[N];
for (n in 1:N){
z[n] = categorical_rng(exp_pz[n]);
}
}
"
}
fit_biv <-  stan(model_code = mix_biv,
data=data,
chains =chains,
iter =nMC)
stanfit <- fit_biv
if (sparsity == FALSE){
printed <- cat(print(fit_biv, pars=c("mu", "eta", "L_Sigma")))
}else{
printed <- cat(print(fit_biv, pars=c("mu", "eta", "L_Sigma", "e0")))
}
sims_biv <- rstan::extract(fit_biv)
# Extraction
ris <- as.matrix(sims_biv)
# Post- process of the chains----------------------
group <- sims_biv$z
tau <- sims_biv$L_sigma
prob.st <- sims_biv$eta
M <- nrow(group)
mu_pre_switch_compl <- array(rep(0, M*D*k), dim=c(M,D,k))
for (i in 1:M)
mu_pre_switch_compl[i,,] <- t(sims_biv$mu[i,,])
# Discard iterations
numeffettivogruppi <- apply(group,1,FUN = function(x) length(unique(x)))
sm <- sims_biv$mu[numeffettivogruppi==k,,]
true.iter <- dim(sm)[1]
if (sum(numeffettivogruppi==k)==0){
return(print("HMC has not never been able to identify the required number of groups and the process has been interrupted"))
}else{
mu_pre_switch <- array(rep(0, true.iter*D*k), dim=c(true.iter,D,k))
for (i in 1:true.iter)
mu_pre_switch[i,,] <- t(sm[i,,])
}
mcmc_mean_raw = mu_pre_switch_compl
mcmc_weight_raw = prob.st
mcmc_sd_raw = tau
group <- sims_biv$z[numeffettivogruppi==k,]
mu <- mu_pre_switch
tau <- sims_biv$L_sigma[numeffettivogruppi==k, ]
prob.st <- sims_biv$eta[numeffettivogruppi==k,]
FreqGruppiJags <- table(group)
model_code <- mix_biv
}
group.orig <- group
verigruppi <- as.double(names(table(group)))
prob.st <- prob.st[,verigruppi]
mu <- mu[,,verigruppi]
# Switching Post
cont <- 0
for (l in verigruppi){
cont <- cont+1
group.orig[group==l] <- cont
}
k.orig <- k
if (cont > 1){
k <- cont
}
mu_switch  <- array(rep(0, true.iter*D*k), dim=c(true.iter,D,k))
prob.st_switch <-  array(0, dim=c(true.iter,k))
group <- group*0
z <- array(0,dim=c(N, k, true.iter))
for (i in 1:true.iter){
perm <- sample(1:k,k,replace=FALSE)
for (j in 1:k){
#post-processing
group[i,group.orig[i,]==j] <- perm[j]
}
mu_switch[i,,] <- mu[i,,perm]
prob.st_switch[i,] <- prob.st[i,perm]
}
for (i in 1:true.iter){
for (j in 1:N){
z[j,group[i,j],i] <- 1
}
}
mcmc_mean <- mu_switch
mcmc_sd <- tau
mcmc_weight <- prob.st_switch
}
FreqGruppiJagsPERM <- table(group)
Freq <- cbind(FreqGruppiJags,FreqGruppiJagsPERM)
colnames(Freq) <- c("JAGS raw groups", "JAGS post-processed groups")
# Similarity matrix based on MCMC sampling------------------------
nz <- dim(z)[1]
M <- dim(z)[3]
C <- matrix(NA,nz,nz)
zm <- apply(z,c(1,3),FUN=function(x) sum(x*(1:length(x))))
for (i in 1:(nz-1)){
for (j in (i+1):nz){
C[i,j] <- sum(zm[i,]==zm[j,])/M
C[j,i] <- C[i,j]
}
}
matdissim <- 1-C
diag(matdissim) <- 0
# Clustering on dissimilarity matrix-------------
if (missing(clustering)){
gr  <- diana(matdissim,diss=TRUE)
grr <- cutree(gr, k)
}else if(clustering =="diana"){
gr  <- diana(matdissim,diss=TRUE)
grr <- cutree(gr, k)
}else if(clustering == "hclust"){
gr  <- hclust(as.dist(matdissim))
grr <- cutree(gr, k)
}
available_met <- 3
piv.criterion.choices <- c("maxsumint", "minsumnoint",
"maxsumdiff")
if (missing(piv.criterion)){
piv.criterion <- "maxsumint"
}
if (piv.criterion=="maxsumint"||
piv.criterion=="minsumnoint"||
piv.criterion=="maxsumdiff" ){
piv.index <- (1:3)[piv.criterion.choices==piv.criterion]
piv.index.pivotal <- c(1,2,3)
available_met <- 3
x <- c(1:available_met)
clust  <-  piv_sel(C=C, clusters=as.vector(grr))
pivots <- clust$pivots[,piv.index.pivotal[piv.index]]
}else if(piv.criterion=="MUS"){
if (k <=4 & sum(C==0)!=0){
mus_res    <- MUS(C, grr)
pivots     <-  mus_res$pivots
}else{
print("maxsumint criterion instead of MUS has been adopted due to
computational efficiency")
clust  <-  piv_sel(C=C,  clusters=as.vector(grr))
pivots <- clust$pivots[,3]
}
}
if (software == "rjags"){
stanfit = NULL
}
return(list( true.iter = true.iter,
Mu = mu_inits,
groupPost=group,
mcmc_mean = mcmc_mean,
mcmc_sd = mcmc_sd,
mcmc_weight = mcmc_weight,
mcmc_mean_raw = mcmc_mean_raw,
mcmc_sd_raw = mcmc_sd_raw,
mcmc_weight_raw = mcmc_weight_raw,
C=C,
grr=grr,
pivots = pivots,
model = model_code,
k = k,
stanfit = stanfit,
nclusters = numeffettivogruppi))
}
data(fish)
y <- fish[,1]
k <- 5
nMC <- 600
res <- piv_MCMC(y = y, k = k, nMC = nMC, sparsity=TRUE, software="rstan")
library(devtools)
install_github("leoegidi/pivmet")
install_github("leoegidi/pivmet")
library(devtools)
install_github("leoegidi/pivmet")
library(bayesmix); library(pivmet);
data(fish)
y <- fish[,1]
k <- 5
nMC <- 600
res <- piv_MCMC(y = y, k = k, nMC = nMC, software="rstan", sparsity=TRUE)
barplot(table(res$nclusters))
res$nclusters
length(res$nclusters)
library(bayesmix); library(pivmet);
data(fish)
y <- fish[,1]
k <- 5
nMC <- 600
res <- piv_MCMC(y = y, k = k, nMC = nMC, software="rstan", sparsity=TRUE, priors=list(a_sp=2, b_sp=2))
barplot(table(res$nclusters))
res$nclusters
print(res$stanfit, pars=c("e0"))
library(bayesmix); library(pivmet);
data(fish)
y <- fish[,1]
k <- 5
nMC <- 600
res <- piv_MCMC(y = y, k = k, nMC = nMC, software="rjags", sparsity=TRUE, priors=list(a_sp=2, b_sp=2))
barplot(res$nclusters)
res$nclusters
barplot(table(res$nclusters))
library(devtools)
install_github("leoegidi/pivmet")
library(pivmet)
N   <- 200
k   <- 4
D   <- 2
nMC <- 1000
M1  <- c(-.5,8)
M2  <- c(25.5,.1)
M3  <- c(49.5,8)
M4  <- c(63.0,.1)
Mu  <- rbind(M1,M2,M3,M4)
Sigma.p1 <- diag(D)
Sigma.p2 <- 20*diag(D)
W <- c(0.2,0.8)
sim <- piv_sim(N = N, k = k, Mu = Mu,
Sigma.p1 = Sigma.p1,
Sigma.p2 = Sigma.p2, W = W)
## rjags (default)
res <- piv_MCMC(y = sim$y, k =k, nMC = nMC, sparsity = TRUE, software = "rjags")
barplot(res$nclusters)
barplot(table(res$nclusters))
N   <- 200
k   <- 4
D   <- 2
nMC <- 1000
M1  <- c(-.5,8)
M2  <- c(25.5,.1)
M3  <- c(49.5,8)
M4  <- c(63.0,.1)
Mu  <- rbind(M1,M2,M3,M4)
Sigma.p1 <- diag(D)
Sigma.p2 <- 20*diag(D)
W <- c(0.2,0.8)
sim <- piv_sim(N = N, k = k, Mu = Mu,
Sigma.p1 = Sigma.p1,
Sigma.p2 = Sigma.p2, W = W)
## rjags (default)
res <- piv_MCMC(y = sim$y, k =k, nMC = nMC, sparsity = TRUE, software = "rjags", priors=list(a_sp=4, b_sp=2))
barplot(table(res$nclusters))
res$nclusters
sim<-piv_sim(70, 10, c(1:10))
sim<-piv_sim(70, 10, c(1:10), stdev=rep(1,10))
sim<-piv_sim(N=70, k=10, Mu=c(1:10))
sim<-piv_sim(N=70, k=10, Mu=c(1:10), stdev=rep(1,10))
library(pivmet)
sim<-piv_sim(N=70, k=10, Mu=c(1:10), stdev=cbind(rep(1,10), rep(1,10)))
sim$y
res <- piv_MCMC(y = sim$y, k =10, nMC = 500, sparsity = TRUE, software = "rstan")
barplot(table(res$nclusters))
N   <- 200
k   <- 4
D   <- 2
nMC <- 1000
M1  <- c(2,1)
M2  <- c(2,2)
M3  <- c(3,1)
M4  <- c(2,2)
Mu  <- rbind(M1,M2,M3,M4)
Sigma.p1 <- diag(D)
Sigma.p2 <- 20*diag(D)
W <- c(0.2,0.8)
sim <- piv_sim(N = N, k = k, Mu = Mu,
Sigma.p1 = Sigma.p1,
Sigma.p2 = Sigma.p2, W = W)
res <- piv_MCMC(y = sim$y, k =k, nMC = nMC, sparsity = TRUE)
res <- piv_MCMC(y = sim$y, k =k, nMC = nMC, sparsity = TRUE, priors=c(a_sp=2, b_sp=2))
res <- piv_MCMC(y = sim$y, k =k, nMC = nMC, sparsity = TRUE)
N   <- 200
k   <- 4
D   <- 2
nMC <- 1000
M1  <- c(2,1)
M2  <- c(2,2)
M3  <- c(3,1)
M4  <- c(2,3)
Mu  <- rbind(M1,M2,M3,M4)
Sigma.p1 <- diag(D)
Sigma.p2 <- 20*diag(D)
W <- c(0.2,0.8)
sim <- piv_sim(N = N, k = k, Mu = Mu,
Sigma.p1 = Sigma.p1,
Sigma.p2 = Sigma.p2, W = W)
res <- piv_MCMC(y = sim$y, k =k, nMC = nMC, sparsity = TRUE)
sim<-piv_sim(N=70, k=10, Mu=c(1:10), stdev=cbind(rep(1,10), rep(1,10)))
res <- piv_MCMC(y = sim$y, k =10, nMC = 500, sparsity = TRUE, software = "rstan", priors=c(a_sp=2, b_sp=1))
res <- piv_MCMC(y = sim$y, k =10, nMC = 500, sparsity = TRUE, software = "rstan", priors=list(a_sp=2, b_sp=1))
res <- piv_MCMC(y = sim$y, k =10, nMC = 500, sparsity = TRUE, software = "rstan", priors=list(a_sp=2, b_sp=1))
barplot(table(res$nclusters))
library(pivmet)
N   <- 200
k   <- 4
D   <- 2
nMC <- 1000
M1  <- c(-.5,8)
M2  <- c(25.5,.1)
M3  <- c(25.5,.1)
M4  <- c(63.0,.1)
Mu  <- rbind(M1,M2,M3,M4)
Sigma.p1 <- diag(D)
Sigma.p2 <- 20*diag(D)
W <- c(0.2,0.8)
sim <- piv_sim(N = N, k = k, Mu = Mu,
Sigma.p1 = Sigma.p1,
Sigma.p2 = Sigma.p2, W = W)
## rjags (default)
res <- piv_MCMC(y = sim$y, k =k, nMC = nMC)
sim <- piv_sim(N = N, k = k, Mu = Mu,
Sigma.p1 = Sigma.p1,
Sigma.p2 = Sigma.p2, W = W)
## rjags (default)
res <- piv_MCMC(y = sim$y, k =k, nMC = nMC, priors=list(a_sp=2, b_sp=4))
barplot(table(res$nclusters))
res
N   <- 200
k   <- 4
D   <- 2
nMC <- 1000
M1  <- c(-.5,8)
M2  <- c(20.5,.1)
M3  <- c(25.5,.1)
M4  <- c(63.0,.1)
Mu  <- rbind(M1,M2,M3,M4)
Sigma.p1 <- diag(D)
Sigma.p2 <- 20*diag(D)
W <- c(0.2,0.8)
sim <- piv_sim(N = N, k = k, Mu = Mu,
Sigma.p1 = Sigma.p1,
Sigma.p2 = Sigma.p2, W = W)
## rjags (default)
res <- piv_MCMC(y = sim$y, k =k, nMC = nMC, priors=list(a_sp=2, b_sp=4))
barplot(table(res$nclusters))
sim <- piv_sim(N = N, k = k, Mu = rnorm(10),
stdev=cbind(rep(1,10), rep(1,10)))
## rjags (default)
res <- piv_MCMC(y = sim$y, k =k, nMC = nMC, priors=list(a_sp=2, b_sp=4))
sim <- piv_sim(N = 70, k = 10, Mu = rnorm(10),
stdev=cbind(rep(1,10), rep(1,10)))
## rjags (default)
res <- piv_MCMC(y = sim$y, k =10, nMC = 600, software="rstan", priors=list(a_sp=1, b_sp=10))
barplot(table(res$nclusters))
res$nclusters
