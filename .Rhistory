printed <- cat(print(fit_univ, pars =c("mu", "eta", "sigma")))
}else{
printed <- cat(print(fit_univ, pars =c("mu", "eta", "sigma", "e0")))
}
sims_univ <- rstan::extract(fit_univ)
J <- 3
mcmc.pars <- array(data = NA, dim = c(dim(sims_univ$eta)[1], k, J))
mcmc.pars[ , , 1] <- sims_univ$mu
mcmc.pars[ , , 2] <- sims_univ$sigma
mcmc.pars[ , , 3] <- sims_univ$eta
mu_pre_switch_compl <-  mcmc.pars[ , , 1]
tau_pre_switch_compl <-  mcmc.pars[ , , 2]
prob.st_pre_switch_compl <-  mcmc.pars[ , , 3]
mu <- mcmc.pars[,,1]
tau <- mcmc.pars[,,2]
prob.st <- mcmc.pars[,,3]
group <-  sims_univ$z[, 1:N] #gruppi
FreqGruppiJags <- table(group)
numeffettivogruppi <- apply(group,1,FUN = function(x) length(unique(x)))
if (sum(numeffettivogruppi==k)==0){
return(print("HMC has not never been able to identify the required number of groups and the process has been interrupted"))
}
##saved in the output
ris_prel <- as.matrix(fit_univ)
ris <- ris_prel[numeffettivogruppi==k,]
group <- group[numeffettivogruppi==k,]
mu <- mu[numeffettivogruppi==k,]
tau <- tau[numeffettivogruppi==k,]
prob.st <- prob.st[numeffettivogruppi==k,]
true.iter <- nrow(ris)
model_code <- mix_univ
## just another way to save them
mcmc_mean_raw <- mcmc.pars[,,1]
mcmc_sd_raw <- mcmc.pars[,,2]
mcmc_weight_raw <- mcmc.pars[,,3]
}
## resambling
group.orig <- group
verigruppi <- as.double(names(table(group)))
cont <- 0
for (verogruppo in verigruppi){
cont <- cont+1
# update pivot counter
group.orig[group==verogruppo] <- cont
}
cont
k.orig <- k
if (cont>1){
k <- cont
}
mu <- mu[,verigruppi]
tau <- tau[,verigruppi]
prob.st <- prob.st[,verigruppi]
M <- nrow(group)
group <- group*0
mu_switch = tau_switch = prob.st_switch = array(rep(0, true.iter*k), dim=c(true.iter,k))
z <- array(0,dim=c(N, k, true.iter))
for (i in 1:true.iter){
perm <- sample(1:k,k,replace=FALSE)
for (j in 1:k){
#post-processing
group[i,group.orig[i,]==j] <- perm[j]
}
mu_switch[i,] <- mu[i,perm]
tau_switch[i,] <- tau[i,perm]
prob.st_switch[i,] <- prob.st[i,perm]
}
for (i in 1:true.iter){
for (j in 1:N){
z[j,group[i,j],i] <- 1
}
}
mcmc_mean = mcmc_sd = mcmc_weight = array(0, dim=c(true.iter, k))
mcmc_mean <- mu_switch
mcmc_sd <- tau_switch
mcmc_weight <- prob.st_switch
}else if (is.matrix(y)){
N <- dim(y)[1]
D <- dim(y)[2]
# Parameters' initialization
clust_inits <- kmeans(y, k, nstart = 10)$cluster
mu_inits <- matrix(0,k,D)
for (j in 1:k){
for (d in 1:D){
mu_inits[j, d] <- mean(y[clust_inits==j,d])
}}
#Reorder mu_inits according to the x-coordinate
mu_inits <-
mu_inits[sort(mu_inits[,1], decreasing=FALSE, index.return=TRUE)$ix,]
if (software=="rjags"){
# JAGS code------------------------
# Initial values
if (missing(priors)){
mu_0 <- rep(0, D)
S2 <- diag(D)/100000
S3 <- diag(D)/100000
alpha <- rep(1,k)
}else{
if (is.null(priors$mu_0)){
mu_0 <- rep(0, D)
}else{
mu_0 <- priors$mu_0
}
if (is.null(priors$S2)){
S2 <- diag(D)/100000
}else{
S2 <- priors$S2
}
if (is.null(priors$S3)){
S3 <- diag(D)/100000
}else{
S3 <- priors$S3
}
if (is.null(priors$alpha)){
alpha <- rep(1, k)
}else{
alpha <- priors$alpha
}
}
# Data
dati.biv <- list(y = y, N = N, k = k, D = D,
S2= S2, S3= S3, mu_0=mu_0,
alpha = alpha)
# Model
mod.mist.biv<-"model{
# Likelihood:
for (i in 1:N){
yprev[i,1:D]<-y[i,1:D]
y[i,1:D] ~ dmnorm(mu[clust[i],],tau)
clust[i] ~ dcat(eta[1:k] )
}
# Prior:
for (g in 1:k) {
mu[g,1:D] ~ dmnorm(mu_0[],S2[,])}
tau[1:D,1:D] ~ dwish(S3[,],D+1)
Sigma[1:D,1:D] <- inverse(tau[,])
eta[1:k] ~ ddirch(alpha)
}"
init1.biv <- list()
for (s in 1:chains){
init1.biv[[s]] <- dump.format(list(mu=mu_inits,
tau= 15*diag(D),
eta=rep(1/k,k), clust=clust_inits))
}
moni.biv <- c("clust","mu","tau","eta")
mod   <- mod.mist.biv
dati  <- dati.biv
init1 <- init1.biv
moni  <- moni.biv
# Jags execution
ogg.jags <- run.jags(model=mod, data=dati, monitor=moni,
inits=init1, n.chains=chains,plots=FALSE, thin=1,
sample=nMC, burnin=burn)
printed <- print(add.summary(ogg.jags, vars= c("mu",
"tau",
"eta")))
# Extraction
ris <- ogg.jags$mcmc[[1]]
# Post- process of the chains----------------------
group <- ris[-(1:burn),grep("clust[",colnames(ris),fixed=TRUE)]
# only the variances
tau <- sqrt( (1/ris[-(1:burn),grep("tau[",colnames(ris),fixed=TRUE)])[,c(1,4)])
prob.st <- ris[-(1:burn),grep("eta[",colnames(ris),fixed=TRUE)]
M <- nrow(group)
H <- list()
mu_pre_switch_compl <- array(rep(0, M*D*k), dim=c(M,D,k))
for (i in 1:k){
H[[i]] <- ris[-(1:burn),
grep(paste("mu[",i, sep=""),
colnames(ris),fixed=TRUE)]
#[,c(i,i+k)]
}
for (i in 1:k){
mu_pre_switch_compl[,,i] <- as.matrix(H[[i]])
}
# Discard iterations
numeffettivogruppi <- apply(group,1,FUN = function(x) length(unique(x)))
ris <- ris[numeffettivogruppi==k,]
true.iter <- nrow(ris)
if (sum(numeffettivogruppi==k)==0){
return(print("MCMC has not never been able to identify the required number of groups and the process has been interrupted"))
}else{
L<-list()
mu_pre_switch <- array(rep(0, true.iter*D*k), dim=c(true.iter,D,k))
for (i in 1:k){
L[[i]] <- ris[,grep(paste("mu[", i, sep=""),
colnames(ris),fixed=TRUE)]
}
for (i in 1:k){
mu_pre_switch[,,i] <- as.matrix(L[[i]])
}
}
group <- ris[,grep("clust[",colnames(ris),fixed=TRUE)]
FreqGruppiJags <- table(group)
model_code <- mod.mist.biv
mcmc_mean_raw = mu_pre_switch_compl
mcmc_weight_raw = prob.st
mcmc_sd_raw = tau
tau <- sqrt( (1/ris[,grep("tau[",colnames(ris),fixed=TRUE)])[,c(1,4)])
prob.st <- ris[,grep("eta[",colnames(ris),fixed=TRUE)]
mu <- mu_pre_switch
}else if(software=="rstan"){
if (missing(priors)){
mu_0 <- rep(0, D)
epsilon <- 1
sigma_d <- 2.5
a_sp <- 1
b_sp <- 200
}else{
if (is.null(priors$mu_0)){
mu_0 <- rep(0, D)
}else{
mu_0 <- priors$mu_0
}
if (is.null(priors$epsilon)){
epsilon <- 1
}else{
epsilon  <- priors$epsilon
}
if (is.null(priors$sigma_d)){
sigma_d <- 2.5
}else{
sigma_d <- priors$sigma_d
}
if (is.null(priors$a_sp)){
a_sp <- 1
}else{
a_sp <- priors$a_sp
}
if (is.null(priors$b_sp)){
b_sp <- 200
}else{
b_sp <- priors$b_sp
}
}
data =list(N=N, k=k, y=y, D=D, mu_0=mu_0,
epsilon = epsilon, sigma_d = sigma_d,
a = a_sp, b=b_sp)
# sparsity
if (sparsity=="FALSE"){
mix_biv <- "
data {
int<lower=1> k;          // number of mixture components
int<lower=1> N;          // number of data points
int D;                   // data dimension
matrix[N,D] y;           // observations matrix
vector[D] mu_0;
real<lower=0> epsilon;
real<lower=0> sigma_d;
}
parameters {
simplex[k] eta;         // mixing proportions
vector[D] mu[k];        // locations of mixture components
cholesky_factor_corr[D] L_Omega;   // scales of mixture components
vector<lower=0>[D] L_sigma;
cholesky_factor_corr[D] L_tau_Omega;   // scales of mixture components
vector<lower=0>[D] L_tau;
}
transformed parameters{
vector[k] log_eta = log(eta);  // cache log calculation
vector[k] pz[N];
simplex[k] exp_pz[N];
matrix[D,D] L_Sigma=diag_pre_multiply(L_sigma, L_Omega);
matrix[D,D] L_Tau=diag_pre_multiply(L_tau, L_tau_Omega);
for (n in 1:N){
pz[n]=   multi_normal_cholesky_lpdf(y[n]|mu, L_Sigma)+
log_eta-
log_sum_exp(multi_normal_cholesky_lpdf(y[n]|
mu, L_Sigma)+
log_eta);
exp_pz[n] = exp(pz[n]);
}
}
model{
L_Omega ~ lkj_corr_cholesky(epsilon);
L_sigma ~ cauchy(0, sigma_d);
mu ~ multi_normal_cholesky(mu_0, L_Tau);
for (n in 1:N) {
vector[k] lps = log_eta;
for (j in 1:k){
lps[j] += multi_normal_cholesky_lpdf(y[n] |
mu[j], L_Sigma);
target+=pz[n,j];
}
target += log_sum_exp(lps);
}
}
generated quantities{
int<lower=1, upper=k> z[N];
for (n in 1:N){
z[n] = categorical_rng(exp_pz[n]);
}
}
"
}else{
mix_biv <- "
data {
int<lower=1> k;          // number of mixture components
int<lower=1> N;          // number of data points
int D;                   // data dimension
matrix[N,D] y;           // observations matrix
vector[D] mu_0;
real<lower=0> epsilon;
real<lower=0> sigma_d;
real<lower=0> a;         // hyper-shape gamma e0
real<lower=0> b;         // hyper-rate gamma e0
}
parameters {
simplex[k] eta;         // mixing proportions
vector[D] mu[k];        // locations of mixture components
cholesky_factor_corr[D] L_Omega;   // scales of mixture components
vector<lower=0>[D] L_sigma;
cholesky_factor_corr[D] L_tau_Omega;   // scales of mixture components
vector<lower=0>[D] L_tau;
real<lower=0> e0;       // dirichlet concentration
}
transformed parameters{
vector[k] log_eta = log(eta);  // cache log calculation
vector<lower=0>[k] alpha = rep_vector(e0, k);
vector[k] pz[N];
simplex[k] exp_pz[N];
matrix[D,D] L_Sigma=diag_pre_multiply(L_sigma, L_Omega);
matrix[D,D] L_Tau=diag_pre_multiply(L_tau, L_tau_Omega);
for (n in 1:N){
pz[n]=   multi_normal_cholesky_lpdf(y[n]|mu, L_Sigma)+
log_eta-
log_sum_exp(multi_normal_cholesky_lpdf(y[n]|
mu, L_Sigma)+
log_eta);
exp_pz[n] = exp(pz[n]);
}
}
model{
L_Omega ~ lkj_corr_cholesky(epsilon);
L_sigma ~ cauchy(0, sigma_d);
mu ~ multi_normal_cholesky(mu_0, L_Tau);
eta ~ dirichlet(alpha);
e0 ~ gamma(a, b);
for (n in 1:N) {
vector[k] lps = log_eta;
for (j in 1:k){
lps[j] += multi_normal_cholesky_lpdf(y[n] |
mu[j], L_Sigma);
target+=pz[n,j];
}
target += log_sum_exp(lps);
}
}
generated quantities{
int<lower=1, upper=k> z[N];
for (n in 1:N){
z[n] = categorical_rng(exp_pz[n]);
}
}
"
}
fit_biv <-  stan(model_code = mix_biv,
data=data,
chains =chains,
iter =nMC)
stanfit <- fit_biv
if (sparsity == FALSE){
printed <- cat(print(fit_biv, pars=c("mu", "eta", "L_Sigma")))
}else{
printed <- cat(print(fit_biv, pars=c("mu", "eta", "L_Sigma", "e0")))
}
sims_biv <- rstan::extract(fit_biv)
# Extraction
ris <- as.matrix(sims_biv)
# Post- process of the chains----------------------
group <- sims_biv$z
tau <- sims_biv$L_sigma
prob.st <- sims_biv$eta
M <- nrow(group)
mu_pre_switch_compl <- array(rep(0, M*D*k), dim=c(M,D,k))
for (i in 1:M)
mu_pre_switch_compl[i,,] <- t(sims_biv$mu[i,,])
# Discard iterations
numeffettivogruppi <- apply(group,1,FUN = function(x) length(unique(x)))
sm <- sims_biv$mu[numeffettivogruppi==k,,]
true.iter <- dim(sm)[1]
if (sum(numeffettivogruppi==k)==0){
return(print("HMC has not never been able to identify the required number of groups and the process has been interrupted"))
}else{
mu_pre_switch <- array(rep(0, true.iter*D*k), dim=c(true.iter,D,k))
for (i in 1:true.iter)
mu_pre_switch[i,,] <- t(sm[i,,])
}
mcmc_mean_raw = mu_pre_switch_compl
mcmc_weight_raw = prob.st
mcmc_sd_raw = tau
group <- sims_biv$z[numeffettivogruppi==k,]
mu <- mu_pre_switch
tau <- sims_biv$L_sigma[numeffettivogruppi==k, ]
prob.st <- sims_biv$eta[numeffettivogruppi==k,]
FreqGruppiJags <- table(group)
model_code <- mix_biv
}
group.orig <- group
verigruppi <- as.double(names(table(group)))
prob.st <- prob.st[,verigruppi]
mu <- mu[,,verigruppi]
# Switching Post
cont <- 0
for (l in verigruppi){
cont <- cont+1
group.orig[group==l] <- cont
}
k.orig <- k
if (cont > 1){
k <- cont
}
mu_switch  <- array(rep(0, true.iter*D*k), dim=c(true.iter,D,k))
prob.st_switch <-  array(0, dim=c(true.iter,k))
group <- group*0
z <- array(0,dim=c(N, k, true.iter))
for (i in 1:true.iter){
perm <- sample(1:k,k,replace=FALSE)
for (j in 1:k){
#post-processing
group[i,group.orig[i,]==j] <- perm[j]
}
mu_switch[i,,] <- mu[i,,perm]
prob.st_switch[i,] <- prob.st[i,perm]
}
for (i in 1:true.iter){
for (j in 1:N){
z[j,group[i,j],i] <- 1
}
}
mcmc_mean <- mu_switch
mcmc_sd <- tau
mcmc_weight <- prob.st_switch
}
FreqGruppiJagsPERM <- table(group)
Freq <- cbind(FreqGruppiJags,FreqGruppiJagsPERM)
colnames(Freq) <- c("JAGS raw groups", "JAGS post-processed groups")
# Similarity matrix based on MCMC sampling------------------------
nz <- dim(z)[1]
M <- dim(z)[3]
C <- matrix(NA,nz,nz)
zm <- apply(z,c(1,3),FUN=function(x) sum(x*(1:length(x))))
for (i in 1:(nz-1)){
for (j in (i+1):nz){
C[i,j] <- sum(zm[i,]==zm[j,])/M
C[j,i] <- C[i,j]
}
}
matdissim <- 1-C
diag(matdissim) <- 0
# Clustering on dissimilarity matrix-------------
if (missing(clustering)){
gr  <- diana(matdissim,diss=TRUE)
grr <- cutree(gr, k)
}else if(clustering =="diana"){
gr  <- diana(matdissim,diss=TRUE)
grr <- cutree(gr, k)
}else if(clustering == "hclust"){
gr  <- hclust(as.dist(matdissim))
grr <- cutree(gr, k)
}
available_met <- 3
piv.criterion.choices <- c("maxsumint", "minsumnoint",
"maxsumdiff")
if (missing(piv.criterion)){
piv.criterion <- "maxsumint"
}
if (piv.criterion=="maxsumint"||
piv.criterion=="minsumnoint"||
piv.criterion=="maxsumdiff" ){
piv.index <- (1:3)[piv.criterion.choices==piv.criterion]
piv.index.pivotal <- c(1,2,3)
available_met <- 3
x <- c(1:available_met)
clust  <-  piv_sel(C=C, clusters=as.vector(grr))
pivots <- clust$pivots[,piv.index.pivotal[piv.index]]
}else if(piv.criterion=="MUS"){
if (k <=4 & sum(C==0)!=0){
mus_res    <- MUS(C, grr)
pivots     <-  mus_res$pivots
}else{
print("maxsumint criterion instead of MUS has been adopted due to
computational efficiency")
clust  <-  piv_sel(C=C,  clusters=as.vector(grr))
pivots <- clust$pivots[,3]
}
}
if (software == "rjags"){
stanfit = NULL
}
return(list( true.iter = true.iter,
Mu = mu_inits,
groupPost=group,
mcmc_mean = mcmc_mean,
mcmc_sd = mcmc_sd,
mcmc_weight = mcmc_weight,
mcmc_mean_raw = mcmc_mean_raw,
mcmc_sd_raw = mcmc_sd_raw,
mcmc_weight_raw = mcmc_weight_raw,
C=C,
grr=grr,
pivots = pivots,
model = model_code,
k = k,
stanfit = stanfit,
nclusters = numeffettivogruppi))
}
data(fish)
y <- fish[,1]
k <- 5
nMC <- 600
res <- piv_MCMC(y = y, k = k, nMC = nMC, sparsity=TRUE, software="rstan")
