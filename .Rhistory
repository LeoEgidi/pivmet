Sigma.p1 <- diag(D)
Sigma.p2 <- 20*diag(D)
W   <- c(0.2,0.8)
sim <- piv_sim(N = N, k = k, Mu = Mu, Sigma.p1 = Sigma.p1,
Sigma.p2 = Sigma.p2, W = W)
res <- piv_MCMC(sim$y,k, 300)
library(RcmdrMisc)
res <- piv_MCMC(sim$y,k, 300)
library(pivmet)
res <- piv_MCMC(sim$y,k, 300)
library(runjags)
res <- piv_MCMC(sim$y,k, 300)
devtools::document()
library(pivmet)
help(piv_sim)
N  <- 2000
k  <- 3
D <- 4
M1 <- c(-45,8,2,3)
M2 <- c(45,.1,2,4)
M3 <- c(100,8,4 ,5)
Mu <- rbind(M1,M2,M3)
Sigma.p1 <- diag(D)
Sigma.p2 <- 20*diag(D)
W   <- c(0.2,0.8)
sim <- piv_sim(N = N, k = k, Mu = Mu, Sigma.p1 = Sigma.p1,
Sigma.p2 = Sigma.p2, W = W)
res <- piv_MCMC(y=sim$y, k=3, nMC = 300)
N  <- 2000
k  <- 3
D <- 2
M1 <- c(-45,8)
M2 <- c(45,.1)
M3 <- c(100,8)
Mu <- rbind(M1,M2,M3)
Sigma.p1 <- diag(D)
Sigma.p2 <- 20*diag(D)
W   <- c(0.2,0.8)
sim <- piv_sim(N = N, k = k, Mu = Mu, Sigma.p1 = Sigma.p1,
Sigma.p2 = Sigma.p2, W = W)
graphics::plot(sim$y, xlab="y[,1]", ylab="y[,2]")
res <- piv_MCMC(y=sim$y, k=3, nMC = 300)
N  <- 2000
k  <- 3
D <- 4
M1 <- c(-45,8,2,3)
M2 <- c(45,.1,2,4)
M3 <- c(100,8,4 ,5)
Mu <- rbind(M1,M2,M3)
Sigma.p1 <- diag(D)
Sigma.p2 <- 20*diag(D)
W   <- c(0.2,0.8)
sim <- piv_sim(N = N, k = k, Mu = Mu, Sigma.p1 = Sigma.p1,
Sigma.p2 = Sigma.p2, W = W)
res <- piv_MCMC(y=sim$y, k=3, nMC = 300)
rel <- piv_rel(res)
rel <- piv_rel(res)
devtools::document()
help(piv_MCMC)
rel <- piv_rel(res)
help(piv_sim)
help(piv_MCMC)
devtools::document()
help(piv_MCMC)
devtools::document()
help(piv_rel)
help(piv_MCMC)
res$mcmc_mean_raw
dim(res$mcmc_mean_raw)
dim(res$mcmc_mean)
library(pivmet)
rel <- piv_rel(res)
rel$rel_mean
help(piv_rel)
piv_plot(y=sim$y, mcmc=res, rel_est = rel, type="chains")
devtools::document()
help(piv_rel)
N <- 200
k <- 3
D <- 2
nMC <- 5000
M1  <- c(-.5,8)
M2  <- c(25.5,.1)
M3  <- c(49.5,8)
Mu  <- matrix(rbind(M1,M2,M3),c(k,2))
Sigma.p1 <- diag(D)
Sigma.p2 <- 20*diag(D)
W <- c(0.2,0.8)
sim <- piv_sim(N = N, k = k, Mu = Mu,
Sigma.p1 = Sigma.p1,
Sigma.p2 = Sigma.p2, W = W)
res <- piv_MCMC(y = sim$y, k = k, nMC = nMC)
rel <- piv_rel(mcmc = res)
piv_plot(y=sim$y, mcmc=res, rel_est = rel, type="chains")
piv_plot(y=sim$y, mcmc=res, rel_est = rel,
type="hist")
help(piv_plot)
help(piv_MCMC)
N   <- 200
k   <- 4
D   <- 4
nMC <- 300
M1  <- c(-.5,8,2,3)
M2  <- c(25.5,.1,1,2)
M3  <- c(49.5,8,4,5)
M4  <- c(63.0,.1,5,6)
Mu  <- rbind(M1,M2,M3,M4)
Sigma.p1 <- diag(D)
Sigma.p2 <- 20*diag(D)
W <- c(0.2,0.8)
sim <- piv_sim(N = N, k = k, Mu = Mu,
Sigma.p1 = Sigma.p1,
Sigma.p2 = Sigma.p2, W = W)
res_stan <- piv_MCMC(y = sim$y, k =k, nMC = nMC,
software ="rstan")
rel <- piv_rel(res_stan)
rel$rel_mean
library(rstanarm)
data(roaches)
# Rescale
roaches$roach1 <- roaches$roach1 / 100
# Estimate original model
glm1 <- glm(y ~ roach1 + treatment + senior, offset = log(exposure2),
data = roaches, family = poisson)
# Estimate Bayesian version with stan_glm
stan_glm1 <- stan_glm(y ~ roach1 + treatment + senior, offset = log(exposure2),
data = roaches, family = poisson,
prior = normal(0, 2.5, autoscale=FALSE),
prior_intercept = normal(0, 5, autoscale=FALSE),
seed = 12345)
glm1
stan_glm1
help(rstan)
help("stan")
library(rstan)
scode <- "
parameters {
real y[2];
}
model {
y[1] ~ normal(0, 1);
y[2] ~ double_exponential(0, 2);
}
"
fit1 <- stan(model_code = scode, iter = 10, verbose = FALSE)
print(fit1)
fit1
fit1
N   <- 200
k   <- 4
D   <- 4
nMC <- 300
M1  <- c(-.5,8,2,3)
M2  <- c(25.5,.1,1,2)
M3  <- c(49.5,8,4,5)
M4  <- c(63.0,.1,5,6)
Mu  <- rbind(M1,M2,M3,M4)
Sigma.p1 <- diag(D)
Sigma.p2 <- 20*diag(D)
W <- c(0.2,0.8)
sim <- piv_sim(N = N, k = k, Mu = Mu,
Sigma.p1 = Sigma.p1,
Sigma.p2 = Sigma.p2, W = W)
library(pivmet)
N   <- 200
k   <- 4
D   <- 4
nMC <- 300
M1  <- c(-.5,8,2,3)
M2  <- c(25.5,.1,1,2)
M3  <- c(49.5,8,4,5)
M4  <- c(63.0,.1,5,6)
Mu  <- rbind(M1,M2,M3,M4)
Sigma.p1 <- diag(D)
Sigma.p2 <- 20*diag(D)
W <- c(0.2,0.8)
sim <- piv_sim(N = N, k = k, Mu = Mu,
Sigma.p1 = Sigma.p1,
Sigma.p2 = Sigma.p2, W = W)
res <- piv_MCMC(sim$y, 4, 300)
library(pivmet)
N   <- 200
k   <- 4
D   <- 4
nMC <- 300
M1  <- c(-.5,8,2,3)
M2  <- c(25.5,.1,1,2)
M3  <- c(49.5,8,4,5)
M4  <- c(63.0,.1,5,6)
Mu  <- rbind(M1,M2,M3,M4)
Sigma.p1 <- diag(D)
Sigma.p2 <- 20*diag(D)
W <- c(0.2,0.8)
sim <- piv_sim(N = N, k = k, Mu = Mu,
Sigma.p1 = Sigma.p1,
Sigma.p2 = Sigma.p2, W = W)
res <- piv_MCMC(sim$y, 4, 300)
res$stanfit
res <- piv_MCMC(y=sim$y, k=4, nMC = 300, software = "rstan")
res$stanfit
devtools::document()
posterior <- as.array(res$stanfit)
library(bayesplot)
mcmc_intervals(posterior)
mcmc_intervals(posterior, pars=c("mu"))
posterior
names(posterior)
mcmc_intervals(posterior, regex_pars=c("mu"))
mcmc_intervals(posterior, regex_pars=c("theta"))
help(piv_MCMC)
devtools::document()
help(piv_MCMC)
help(piv_MCMC)
devtools::document()
help(piv_MCMC)
devtools::document()
help(piv_MCMC)
help(piv_MCMC)
devtools::document()
devtools::document()
help(piv_MCMC)
help(piv_sel)
help(piv_KMeans)
N  <- 620
k  <- 3
n1 <- 20
n2 <- 100
n3 <- 500
x  <- matrix(NA, N,2)
truegroup <- c( rep(1,n1), rep(2, n2), rep(3, n3))
x[1:n1,] <- rmvnorm(n1, c(1,5), sigma=diag(2))
x[(n1+1):(n1+n2),] <- rmvnorm(n2, c(4,0), sigma=diag(2))
x[(n1+n2+1):(n1+n2+n3),] <- rmvnorm(n3, c(6,6), sigma=diag(2))
# Apply piv_KMeans with MUS as pivotal criterion
res <- piv_KMeans(x, k)
res2 <- piv_KMeans(x, k, piv.criterion ="maxsumdiff")
# Plot the data and the clustering solution
par(mfrow=c(1,2), pty="s")
colors_cluster <- c("grey", "darkolivegreen3", "coral")
colors_centers <- c("black", "darkgreen", "firebrick")
graphics::plot(x, col = colors_cluster[truegroup],
bg= colors_cluster[truegroup], pch=21, xlab="x[,1]",
ylab="x[,2]", cex.lab=1.5,
main="True data", cex.main=1.5)
graphics::plot(x, col = colors_cluster[res$cluster],
bg=colors_cluster[res$cluster], pch=21, xlab="x[,1]",
ylab="x[,2]", cex.lab=1.5,
main="piv_KMeans", cex.main=1.5)
points(x[res$pivots, 1], x[res$pivots, 2],
pch=24, col=colors_centers,bg=colors_centers,
cex=1.5)
points(res$centers, col = colors_centers[1:k],
pch = 8, cex = 2)
help(piv_plot)
help(piv_MCMC)
help(piv_rel)
devtools::document()
library(bayesmix)
data(fish)
y <- fish[,1]
k <- 5
res2 <- piv_MCMC(y = y, k = k, nMC = 3000,
software = "rstan")
devtools::document()
library(pivmet)
help(piv_MCMC)
help(piv_MCMC)
N   <- 200
k   <- 4
D   <- 2
nMC <- 1000
M1  <- c(-.5,8)
M2  <- c(25.5,.1)
M3  <- c(49.5,8)
M4  <- c(63.0,.1)
Mu  <- rbind(M1,M2,M3,M4)
Sigma.p1 <- diag(D)
Sigma.p2 <- 20*diag(D)
W <- c(0.2,0.8)
sim <- piv_sim(N = N, k = k, Mu = Mu,
Sigma.p1 = Sigma.p1,
Sigma.p2 = Sigma.p2, W = W)
res_stan <- piv_MCMC(y = sim$y, k =k, nMC = nMC,
software ="rstan")
res_stan <- piv_MCMC(y = sim$y, k =k, nMC = nMC,
software ="rstan", priors = list(tau_sigma=4, epsilon=4))
devtools::document()
names <- c("Leo", "Enrico", "Pando", "BB")
squadre_alte  <- c("Barcellona", "Man. United", "Inter",
"Liverpool", "Real Madrid",
"Chelsea", "Milan", "Bayern Monaco",
"Arsenal")
squadre_medie <- c("Roma", "Fiorentina",
"Valencia", "Napoli",
"Man City", "PSG", "Fenherbace")
squadre_basse <- c("Reggina", "Lecce", "Chievo",
"Lilla", "Middlesbrough",
"Athletic Bilbao")
#Turno 1
team1 <- c("Leo", "Enrico")
team2 <- c("Pando", "BB")
team1_gol <- 2
team2_gol <- 1
rank_f <- function(team1_gol, team2_gol, team1, team2,
rank_in = rep(0,4), dr = rep(0,4)){
rank <- rank_in
dr <- dr
if (team1_gol > team2_gol){
rank[(1:4)[names==team1[1]]] <- rank[(1:4)[names==team1[1]]]+3
rank[(1:4)[names==team1[2]]] <- rank[(1:4)[names==team1[2]]]+3
rank[(1:4)[names==team2[1]]] <- rank[(1:4)[names==team2[1]]]
rank[(1:4)[names==team2[2]]] <- rank[(1:4)[names==team2[2]]]
}else if (team1_gol < team2_gol){
rank[(1:4)[names==team1[1]]] <- rank[(1:4)[names==team1[1]]]
rank[(1:4)[names==team1[2]]] <- rank[(1:4)[names==team1[2]]]
rank[(1:4)[names==team2[1]]] <- rank[(1:4)[names==team2[1]]]+3
rank[(1:4)[names==team2[2]]] <- rank[(1:4)[names==team2[2]]]+3
}else{
rank[(1:4)[names==team1[1]]] <- rank[(1:4)[names==team1[1]]]+1
rank[(1:4)[names==team1[2]]] <- rank[(1:4)[names==team1[2]]]+1
rank[(1:4)[names==team2[1]]] <- rank[(1:4)[names==team2[1]]]+1
rank[(1:4)[names==team2[2]]] <- rank[(1:4)[names==team2[2]]]+1
}
return(rank)
}
rank1<-rank_f(team1_gol, team2_gol, team1, team2,
rank)
cbind(names,rank1)
# Turno 2
team1 <- c("BB", "Enrico")
team2<- c("Pando", "Leo")
team1_gol <- 3
team2_gol <- 3
rank2<-rank_f(team1_gol, team2_gol, team1, team2,
rank1)
cbind(names,rank2)
# Turno 3
team1 <- c("BB", "Leo")
team2<- c("Pando", "Enrico")
team1_gol <- 3
team2_gol <- 4
rank3<-rank_f(team1_gol, team2_gol, team1, team2,
rank2)
cbind(names,rank3)
#Turno 4
team1 <- c("Leo", "Enrico")
team2 <- c("Pando", "BB")
team1_gol <- 2
team2_gol <- 1
rank4<-rank_f(team1_gol, team2_gol, team1, team2,
rank3)
cbind(names,rank4)
# Turno 5
team1 <- c("BB", "Enrico")
team2<- c("Pando", "Leo")
team1_gol <- 3
team2_gol <- 3
rank5<-rank_f(team1_gol, team2_gol, team1, team2,
rank4)
cbind(names,rank5)
# Turno 6
team1 <- c("BB", "Leo")
team2<- c("Pando", "Enrico")
team1_gol <- 3
team2_gol <- 4
rank6<-rank_f(team1_gol, team2_gol, team1, team2,
rank5)
cbind(names,rank6)
cbind(names,rank6)
c(squadre_alte, squadre_medie, squadre_basse)[sample(1, 3)]
library(pivmet)
library(pivmet)
help(piv_MCMC)
help(stan_glmer)
help(rstanarm::stan_glmer)
library(rstanarm)
help(stan_glmer)
devtools::document()
devtools::document()
devtools::release()
setwd("C:/Users/leoeg/Dropbox/Corsi esterni, app, materiale vario/CorsiGenerali/moduloC/R")
devtools::document()
library(lasso2)
help(l1ce)
library(lasso2)
library(arm)
data(Prostate)
head(Prostate)
N <- dim(Prostate)[1]
X <- cbind(rep(1,N), Prostate[,1:8])
p <- dim(Prostate)[2]
y <- Prostate[, p]
mod.lasso <- l1ce(lpsa~., data = Prostate)
mod.lasso
summary(mod.lasso)
summ <- summary(mod.lasso)
summ$coefficients
install.packages("glmnet")
help(glmnet)
library(glmnet)
help(glmnet)
summ
summ$coefficients
plot(mod.lasso)
mod.lasso
mod_glmnet <- glmmnet(x = X, y = y, family = "gaussian")
mod_glmnet <- glmnet(x = X, y = y, family = "gaussian")
X
dim(X)
y
help(glmnet)
mod_glmnet <- glmnet(x = X, y = y, family = "gaussian")
X
is.matrix(X)
X <- as.matrix(cbind(rep(1,N), Prostate[,1:8]))
X
mod_glmnet <- glmnet(x = X, y = y, family = "gaussian")
mod_glmnet
summary(mod_glmnet)
plot(mod_glmnet)
devtools::release()
mod_glmnet
mod_glmnet$lambda
cvfit <- cv.glmnet(x = X, y = y)
mod_glmnet2 <- glmnet(x = X, y = y, lambda = cvfit$lambda.min)
mod_glmnet2
summary(mod_glmnet2)
coef(cvfit, s = "lambda.min")
mod_glmnet <- glmnet(x = X, y = y, family = "gaussian", alpha = 1)
mod_glmnet2 <- glmnet(x = X, y = y, lambda = cvfit$lambda.min, alpha = 1)
mod_glmnet2
mod_glmnet$beta
mod_glmnet$call
cvfit <- cv.glmnet(x = X, y = y, alpha = 1)
coef(cvfit, s = "lambda.min")
X
dim(X)
mod_lm <- lm(lpsa~., data = Prostate)
mod_lm$coefficients
mod_lm <- lm(lpsa~., data = Prostate)
cbind(mod_lm$coefficients, mod.lasso$coefficients,
coef(cvfit, s = "lambda.min"),
coef(cvfit_ridge, s = "lambda.min"))
mod_ridge <- glmnet(x = X[,-1], y = y, alpha = 0)
cvfit_ridge <- cv.glmnet(x = X[,-1], y = y, alpha = 0)
mod_ridge2 <- glmnet(x = X[,-1], y = y, alpha = 0,
lambda = cvfit_ridge$lambda.min)
mod_lm <- lm(lpsa~., data = Prostate)
cbind(mod_lm$coefficients, mod.lasso$coefficients,
coef(cvfit, s = "lambda.min"),
coef(cvfit_ridge, s = "lambda.min"))
coef(cvfit, s = "lambda.min")
coef(cvfit, s = "lambda.min")[,1]
mod_lm <- lm(lpsa~., data = Prostate)
cbind(mod_lm$coefficients, mod.lasso$coefficients,
coef(cvfit, s = "lambda.min")[,1],
coef(cvfit_ridge, s = "lambda.min")[,1])
mod_lm$coefficients
mod.lasso$coefficients
mod_lm <- lm(lpsa~., data = Prostate)
tab_est <- cbind(mod_lm$coefficients, mod.lasso$coefficients,
coef(cvfit, s = "lambda.min")[,1],
coef(cvfit_ridge, s = "lambda.min")[,1])
colnames(tab_est) <- c("lm", "l1ce", "glmnet (lasso)", "glmnet (ridge)")
knitr::kable(tab_est)
coef(mod_glmnet2)
help(coef)
mod_lm <- lm(lpsa~., data = Prostate)
tab_est <- cbind(round(mod_lm$coefficients,3),
round(mod.lasso$coefficients,3),
round(coef(mod_glmnet2, s = "lambda.min")[,1],3),       round(coef(mod_ridge2, s = "lambda.min")[,1],3))
colnames(tab_est) <- c("lm", "l1ce", "glmnet (lasso)", "glmnet (ridge)")
tab_est
mod_lm <- lm(lpsa~., data = Prostate)
tab_est <- cbind(round(mod_lm$coefficients,3),
round(mod.lasso$coefficients,3),
round(coef(cvfit, s = "lambda.min")[,1],3),       round(coef(cvfit_ridge, s = "lambda.min")[,1],3))
colnames(tab_est) <- c("lm", "l1ce", "glmnet (lasso)", "glmnet (ridge)")
tab_ets
tab_est
mod.lasso
round(mod_lm$coefficients,3)
round(mod.lasso$coefficients,3)
round(coef(cvfit, s = "lambda.min")[,1],3)
round(coef(cvfit_ridge, s = "lambda.min")[,1],3)
cvfit <- cv.glmnet(x = X[,-1], y = y, alpha = 1)
mod_lm <- lm(lpsa~., data = Prostate)
tab_est <- cbind(round(mod_lm$coefficients,3),
round(mod.lasso$coefficients,3),
round(coef(mod_glmnet2, s = "lambda.min")[,1],3),       round(coef(cvfit_ridge, s = "lambda.min")[,1],3))
colnames(tab_est) <- c("lm", "l1ce", "glmnet (lasso)", "glmnet (ridge)")
round(coef(mod_glmnet2, s = "lambda.min")[,1],3)
coef(mod_glmnet2)
mod_glmnet2 <- glmnet(x = X[,-1], y = y, lambda = cvfit$lambda.min)
mod_lm <- lm(lpsa~., data = Prostate)
tab_est <- cbind(round(mod_lm$coefficients,3),
round(mod.lasso$coefficients,3),
round(coef(mod_glmnet2, s = "lambda.min")[,1],3),       round(coef(cvfit_ridge, s = "lambda.min")[,1],3))
colnames(tab_est) <- c("lm", "l1ce", "glmnet (lasso)", "glmnet (ridge)")
tab_est
mod_lm <- lm(lpsa~., data = Prostate)
tab_est <- cbind(round(mod_lm$coefficients,3),
round(mod.lasso$coefficients,3),
round(coef(mod_glmnet2, s = "lambda.min")[,1],3),       round(coef(mod_ridge2, s = "lambda.min")[,1],3))
colnames(tab_est) <- c("lm", "l1ce", "glmnet (lasso)", "glmnet (ridge)")
tab_est
library(knitr)
help(kable)
plot(mod.lasso)
mod.lasso
devtools
devtools::document()
