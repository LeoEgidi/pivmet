if (is.positive.definite(Sigma.p1)==FALSE |
is.positive.definite(Sigma.p2)==FALSE){
stop("Matrix covariances should be positive definite!")
}
# k
if (is.vector(Mu)){
if (k != length(Mu)){
stop("The number of mixture components has to be equal
to the input means length")
}
}else if (is.matrix(Mu)){
if (k != dim(Mu)[1]){
stop("The number of mixture components has to be equal
to the input means length")
}
}
##########
if (is.vector(Mu)){
true.group <- sample(1:k,N,replace=TRUE,prob=rep(1/k,k))
Spike <- array()
matrixpi <- matrix(rep(W,k), nrow=k, ncol=2, byrow = T)
sotto.gruppi <- matrix(0, nrow=k, ncol=N)
y <- c()
for (i in 1:N){
sotto.gruppi[,i] <- sample(1:2, k, replace=T,
prob=matrixpi[true.group[i],])
y[i] <- rnorm(1, mean=Mu[true.group[i]],
sd=stdev[sotto.gruppi[true.group[i],i]])
}
}else{
true.group <- sample(1:k,N,replace=TRUE,prob=rep(1/k,k))
Spike <- array(c(Sigma.p1,Sigma.p2), dim=c(2,2,2))
# Probability matrix of subgroups
matrixpi <- matrix(rep(W,k), nrow=k, ncol=2, byrow = T)
sotto.gruppi <- matrix(0, nrow=k, ncol=N)
for (i in 1:N){
sotto.gruppi[,i] <- sample(1:2,k,replace=T,
prob=matrixpi[true.group[i],])
}
# Simulation of N units from a mixture of mixtures
y <- matrix(NA,nrow=N,ncol=2)
for (i in 1:length(true.group)){
y[i,] <- mvrnorm(1, Mu[true.group[i],],
Sigma=Spike[,,sotto.gruppi[true.group[i],i]])
}
}
return(list(y=y, true.group=true.group, subgroups=sotto.gruppi))
}
N  <- 2000
k  <- 3
M1 <- c(-45,8)
M2 <- c(45,.1)
M3 <- c(100,8)
Mu <- matrix(rbind(M1,M2,M3),c(k,2))
stdev    <- cbind(rep(1,k), rep(20,k))
Sigma.p1 <- matrix(c( stdev[1,1]^2, 0,0,
stdev[1,1]^2), nrow=2, ncol=2)
Sigma.p2 <- matrix(c(stdev[1,2]^2, 0,0,
stdev[1,2]^2), nrow=2, ncol=2)
W   <- c(0.2,0.8)
sim <- piv_sim(N, k, Mu, Sigma.p1 = Sigma.p1,
Sigma.p2 = Sigma.p2, W)
stdev <- cbind(rep(1,k), rep(20,k))
stdev
dim(stdev)[1]
k
dim(stdev)[1]!=k
piv_sim <- function(N,
k,
Mu,
stdev,
Sigma.p1 = matrix(c(1,0,0,1),2,2, byrow = TRUE),
Sigma.p2 = matrix(c(100,0,0,100),2,2, byrow = TRUE),
W = c(0.5, 0.5)){
# Generation---------------
#############
## checks
# W
if (sum(W)!=1){
stop("Check that the sub-weights sum to one!")
}else if(length(W)!=2){
stop("The sub-weight vector should be of dimension two.")
}
# stdev
if(missing(stdev)){
stdev <- cbind(rep(1,k), rep(20,k))
}
if (dim(stdev)[1]!=k){
stop("The number of rows of stdev has to match
with the number of mixture components, k.")
}
# Sigma.p1 and Sigma.p2
if (is.positive.definite(Sigma.p1)==FALSE |
is.positive.definite(Sigma.p2)==FALSE){
stop("Matrix covariances should be positive definite!")
}
# k
if (is.vector(Mu)){
if (k != length(Mu)){
stop("The number of mixture components has to be equal
to the input means length")
}
}else if (is.matrix(Mu)){
if (k != dim(Mu)[1]){
stop("The number of mixture components has to be equal
to the input means length")
}
}
##########
if (is.vector(Mu)){
true.group <- sample(1:k,N,replace=TRUE,prob=rep(1/k,k))
Spike <- array()
matrixpi <- matrix(rep(W,k), nrow=k, ncol=2, byrow = T)
sotto.gruppi <- matrix(0, nrow=k, ncol=N)
y <- c()
for (i in 1:N){
sotto.gruppi[,i] <- sample(1:2, k, replace=T,
prob=matrixpi[true.group[i],])
y[i] <- rnorm(1, mean=Mu[true.group[i]],
sd=stdev[sotto.gruppi[true.group[i],i]])
}
}else{
true.group <- sample(1:k,N,replace=TRUE,prob=rep(1/k,k))
Spike <- array(c(Sigma.p1,Sigma.p2), dim=c(2,2,2))
# Probability matrix of subgroups
matrixpi <- matrix(rep(W,k), nrow=k, ncol=2, byrow = T)
sotto.gruppi <- matrix(0, nrow=k, ncol=N)
for (i in 1:N){
sotto.gruppi[,i] <- sample(1:2,k,replace=T,
prob=matrixpi[true.group[i],])
}
# Simulation of N units from a mixture of mixtures
y <- matrix(NA,nrow=N,ncol=2)
for (i in 1:length(true.group)){
y[i,] <- mvrnorm(1, Mu[true.group[i],],
Sigma=Spike[,,sotto.gruppi[true.group[i],i]])
}
}
return(list(y=y, true.group=true.group, subgroups=sotto.gruppi))
}
N  <- 2000
k  <- 3
M1 <- c(-45,8)
M2 <- c(45,.1)
M3 <- c(100,8)
Mu <- matrix(rbind(M1,M2,M3),c(k,2))
stdev    <- cbind(rep(1,k), rep(20,k))
Sigma.p1 <- matrix(c( stdev[1,1]^2, 0,0,
stdev[1,1]^2), nrow=2, ncol=2)
Sigma.p2 <- matrix(c(stdev[1,2]^2, 0,0,
stdev[1,2]^2), nrow=2, ncol=2)
W   <- c(0.2,0.8)
sim <- piv_sim(N, k, Mu, Sigma.p1 = Sigma.p1,
Sigma.p2 = Sigma.p2, W)
N  <- 2000
k  <- 3
M1 <- c(-45,8)
M2 <- c(45,.1)
M3 <- c(100,8)
Mu <- matrix(rbind(M1,M2,M3),c(k,2))
stdev    <- cbind(rep(1,k), rep(20,k))
Sigma.p1 <- matrix(c( stdev[1,1]^2, 0,0,
stdev[1,1]^2), nrow=2, ncol=2)
Sigma.p2 <- matrix(c(stdev[1,2]^2, 0,0,
stdev[1,2]^2), nrow=2, ncol=2)
W   <- c(0.2,0.8)
sim <- piv_sim(N, k=k, Mu, Sigma.p1 = Sigma.p1,
Sigma.p2 = Sigma.p2, W)
N  <- 2000
k  <- 3
M1 <- c(-45,8)
M2 <- c(45,.1)
M3 <- c(100,8)
Mu <- matrix(rbind(M1,M2,M3),c(k,2))
stdev    <- cbind(rep(1,k), rep(20,k))
Sigma.p1 <- matrix(c( stdev[1,1]^2, 0,0,
stdev[1,1]^2), nrow=2, ncol=2)
Sigma.p2 <- matrix(c(stdev[1,2]^2, 0,0,
stdev[1,2]^2), nrow=2, ncol=2)
W   <- c(0.2,0.8)
sim <- piv_sim(N, k=k, Mu=Mu, Sigma.p1 = Sigma.p1,
Sigma.p2 = Sigma.p2, W=W)
library(corpcor)
N  <- 2000
k  <- 3
M1 <- c(-45,8)
M2 <- c(45,.1)
M3 <- c(100,8)
Mu <- matrix(rbind(M1,M2,M3),c(k,2))
stdev    <- cbind(rep(1,k), rep(20,k))
Sigma.p1 <- matrix(c( stdev[1,1]^2, 0,0,
stdev[1,1]^2), nrow=2, ncol=2)
Sigma.p2 <- matrix(c(stdev[1,2]^2, 0,0,
stdev[1,2]^2), nrow=2, ncol=2)
W   <- c(0.2,0.8)
sim <- piv_sim(N, k=k, Mu=Mu, Sigma.p1 = Sigma.p1,
Sigma.p2 = Sigma.p2, W=W)
library(pivmet)
N  <- 2000
k  <- 3
M1 <- c(-45,8)
M2 <- c(45,.1)
M3 <- c(100,8)
Mu <- matrix(rbind(M1,M2,M3),c(k,2))
stdev    <- cbind(rep(1,k), rep(20,k))
Sigma.p1 <- matrix(c( stdev[1,1]^2, 0,0,
stdev[1,1]^2), nrow=2, ncol=2)
Sigma.p2 <- matrix(c(stdev[1,2]^2, 0,0,
stdev[1,2]^2), nrow=2, ncol=2)
W   <- c(0.2,0.8)
sim <- piv_sim(N, k=k, Mu=Mu, Sigma.p1 = Sigma.p1,
Sigma.p2 = Sigma.p2, W=W)
library(MASS)
N  <- 2000
k  <- 3
M1 <- c(-45,8)
M2 <- c(45,.1)
M3 <- c(100,8)
Mu <- matrix(rbind(M1,M2,M3),c(k,2))
stdev    <- cbind(rep(1,k), rep(20,k))
Sigma.p1 <- matrix(c( stdev[1,1]^2, 0,0,
stdev[1,1]^2), nrow=2, ncol=2)
Sigma.p2 <- matrix(c(stdev[1,2]^2, 0,0,
stdev[1,2]^2), nrow=2, ncol=2)
W   <- c(0.2,0.8)
sim <- piv_sim(N, k=k, Mu=Mu, Sigma.p1 = Sigma.p1,
Sigma.p2 = Sigma.p2, W=W)
devtools::document()
devtools::check()
help(piv_KMeans)
devtools::document()
devtools::check()
devtools::install_github("leoegidi/pivmet")
sessionInfo()
help("MUS")
help("piv_KMeans")
setwd("~/GitHub/pivmet")
library(pivmet)
devtools::document()
devtools::check()
devtools::document()
library(pivmet)
help("plot")
devtools::document()
library(pivmet)
devtools::document()
library(pivmet)
devtools::document()
devtools::check()
devtools::document()
devtools::check()
library(pivmet)
devtools::document()
devtools::check()
help(lnorm)
help("Lognormal")
curve(dlnorm(x, 0,100))
curve(dlnorm(x, 0,10))
curve(dlnorm(x, 0,1))
curve(dlnorm(x, 0,1), xlim=c(0,10))
curve(dlnorm(x, 0,2), xlim=c(0,10))
curve(dlnorm(x, 0,3), xlim=c(0,10))
curve(dlnorm(x, 0,0.3), xlim=c(0,10))
curve(dlnorm(x, 0,0.3, log = FALSE), xlim=c(0,10))
curve(dlnorm(x, 0,1, log = FALSE), xlim=c(0,10))
curve(dlnorm(x, 0,2, log = FALSE), xlim=c(0,10))
curve(dlnorm(x, 0,0.1, log = FALSE), xlim=c(0,10))
curve(dlnorm(x, 0,5, log = FALSE), xlim=c(0,10))
curve(dlnorm(x, 0,1, log = FALSE), xlim=c(0,10))
library(rstan)
help(rstanarm)
library(rstanarm)
citation(rstanarm)
citation("rstanarm")
citation("rstanarm", bibtex = TRUE)
print(citation("rstanarm"), bibtex = TRUE)
print(citation("rstan"), bibtex = TRUE)
setwd("C:/Users/leoeg/Dropbox/Ricerca/Egidi et al priors/Biometrika/R-Stan code")
library(arm)
library(rstanarm)
library(rstan)
library(xtable)
library(bayesplot)
nyears <- 5
n <- 100
x1 = x2 = matrix(NA, n, nyears)
y <- matrix(NA, n, nyears)
b0 <- 1
b1 <- 1.5
b2 <- 2
for (i in 1:nyears){
x1[,i] <- rnorm(n)
x2[,i] <- rbinom(n, 1, .5)
y[,i] <- rbinom(n, 1, invlogit(b0+b1*x1[,i]+b2*x2[,i]))
}
# induce separation for the fifth year
y[,5] <- ifelse (x2[,5]==1, 0, y[,5])
## separate analysis for each year
M1 <- stan_glm (y[,1] ~ x1[,1] + x2[,1],
family=binomial(link="logit"))
posterior1 <- as.matrix(M1)
M2 <- stan_glm (y[,2] ~ x1[,2] + x2[,2],
family=binomial(link="logit"))
posterior2<- as.matrix(M2)
M3 <- stan_glm (y[,3] ~ x1[,3] + x2[,3],
family=binomial(link="logit"))
posterior3<- as.matrix(M3)
M4 <- stan_glm (y[,4] ~ x1[,4] + x2[,4],
family=binomial(link="logit"))
posterior4<- as.matrix(M4)
M5 <- stan_glm (y[,5] ~ x1[,5] + x2[,5],
family=binomial(link="logit"))
posterior5<- as.matrix(M5)
beta1_names <- c()
beta1_names[1]<- expression(beta[11])
beta1_names[2]<- expression(beta[12])
beta1_names[3]<- expression(beta[13])
beta1_names[4]<- expression(beta[14])
beta1_names[5]<- expression(beta[15])
beta2_names <- c()
beta2_names[1]<- expression(beta[21])
beta2_names[2]<- expression(beta[22])
beta2_names[3]<- expression(beta[23])
beta2_names[4]<- expression(beta[24])
beta2_names[5]<- expression(beta[25])
gl_posterior <- cbind(posterior1, posterior2, posterior3, posterior4, posterior5)
mcmc_areas(gl_posterior,
pars=c("x1[, 1]", "x1[, 2]", "x1[, 3]", "x1[, 4]", "x1[, 5]"))+
xaxis_text(on =TRUE, size=rel(2.9))+
yaxis_text(on =TRUE, size=rel(2.9))+
scale_y_discrete(labels = ((parse(text= beta1_names))))+
ggtitle("Plasma level")+
theme(plot.title = element_text(hjust = 0.5, size =rel(2.6)))
color_scheme_set(scheme = "gray")
pdf(file="images/beta1_bayesplot.pdf", width =9, height =8)
gl_posterior <- cbind(posterior1, posterior2, posterior3, posterior4, posterior5)
mcmc_areas(gl_posterior,
pars=c("x1[, 1]", "x1[, 2]", "x1[, 3]", "x1[, 4]", "x1[, 5]"))+
xaxis_text(on =TRUE, size=rel(2.9))+
yaxis_text(on =TRUE, size=rel(2.9))+
scale_y_discrete(labels = ((parse(text= beta1_names))))+
ggtitle("Plasma level")+
theme(plot.title = element_text(hjust = 0.5, size =rel(2.6)))
dev.off()
install.packages("R.utils")
library(R.utils)
color_scheme_set(scheme = "gray")
eps(file="images/beta1_bayesplot.pdf", width =9, height =8)
gl_posterior <- cbind(posterior1, posterior2, posterior3, posterior4, posterior5)
mcmc_areas(gl_posterior,
pars=c("x1[, 1]", "x1[, 2]", "x1[, 3]", "x1[, 4]", "x1[, 5]"))+
xaxis_text(on =TRUE, size=rel(2.9))+
yaxis_text(on =TRUE, size=rel(2.9))+
scale_y_discrete(labels = ((parse(text= beta1_names))))+
ggtitle("Plasma level")+
theme(plot.title = element_text(hjust = 0.5, size =rel(2.6)))
dev.off()
help(eps)
library(R.utils)
library(utils)
help(eps)
??eps
postscript(file="images/beta1_bayesplot.eps", width =9, height =8,
paper ="special" )
gl_posterior <- cbind(posterior1, posterior2, posterior3, posterior4, posterior5)
mcmc_areas(gl_posterior,
pars=c("x1[, 1]", "x1[, 2]", "x1[, 3]", "x1[, 4]", "x1[, 5]"))+
xaxis_text(on =TRUE, size=rel(2.9))+
yaxis_text(on =TRUE, size=rel(2.9))+
scale_y_discrete(labels = ((parse(text= beta1_names))))+
ggtitle("Plasma level")+
theme(plot.title = element_text(hjust = 0.5, size =rel(2.6)))
dev.off()
png(file="images/beta1_bayesplot.png", width =9, height =8,
paper ="special" )
gl_posterior <- cbind(posterior1, posterior2, posterior3, posterior4, posterior5)
mcmc_areas(gl_posterior,
pars=c("x1[, 1]", "x1[, 2]", "x1[, 3]", "x1[, 4]", "x1[, 5]"))+
xaxis_text(on =TRUE, size=rel(2.9))+
yaxis_text(on =TRUE, size=rel(2.9))+
scale_y_discrete(labels = ((parse(text= beta1_names))))+
ggtitle("Plasma level")+
theme(plot.title = element_text(hjust = 0.5, size =rel(2.6)))
dev.off()
png(file="images/beta1_bayesplot.png", width =9, height =8,
paper ="special" )
gl_posterior <- cbind(posterior1, posterior2, posterior3, posterior4, posterior5)
mcmc_areas(gl_posterior,
pars=c("x1[, 1]", "x1[, 2]", "x1[, 3]", "x1[, 4]", "x1[, 5]"))+
xaxis_text(on =TRUE, size=rel(2.9))+
yaxis_text(on =TRUE, size=rel(2.9))+
scale_y_discrete(labels = ((parse(text= beta1_names))))+
ggtitle("Plasma level")+
theme(plot.title = element_text(hjust = 0.5, size =rel(2.6)))
dev.off()
png(file="images/beta1_bayesplot.png", width =9, height =8)
gl_posterior <- cbind(posterior1, posterior2, posterior3, posterior4, posterior5)
mcmc_areas(gl_posterior,
pars=c("x1[, 1]", "x1[, 2]", "x1[, 3]", "x1[, 4]", "x1[, 5]"))+
xaxis_text(on =TRUE, size=rel(2.9))+
yaxis_text(on =TRUE, size=rel(2.9))+
scale_y_discrete(labels = ((parse(text= beta1_names))))+
ggtitle("Plasma level")+
theme(plot.title = element_text(hjust = 0.5, size =rel(2.6)))
dev.off()
help(png)
png(file="images/beta1_bayesplot.png", width =520, height =480)
gl_posterior <- cbind(posterior1, posterior2, posterior3, posterior4, posterior5)
mcmc_areas(gl_posterior,
pars=c("x1[, 1]", "x1[, 2]", "x1[, 3]", "x1[, 4]", "x1[, 5]"))+
xaxis_text(on =TRUE, size=rel(2.9))+
yaxis_text(on =TRUE, size=rel(2.9))+
scale_y_discrete(labels = ((parse(text= beta1_names))))+
ggtitle("Plasma level")+
theme(plot.title = element_text(hjust = 0.5, size =rel(2.6)))
dev.off()
pdf(file="images/beta2_bayesplot.pdf", width =9, height =8)
gl_posterior <- cbind(posterior1, posterior2, posterior3, posterior4, posterior5)
mcmc_areas(gl_posterior,
pars=c("x2[, 1]", "x2[, 2]", "x2[, 3]", "x2[, 4]", "x2[, 5]"))+
xaxis_text(on =TRUE, size=rel(2.9))+
yaxis_text(on =TRUE, size=rel(2.9))+
scale_y_discrete(labels = ((parse(text= beta2_names))))+
ggtitle("Sex")+
theme(plot.title = element_text(hjust = 0.5, size =rel(2.6)))
dev.off()
Y1_4 <- c(y[,1], y[,2], y[,3], y[,4])
X11_4<- c(x1[,1], x1[,2], x1[,3], x1[,4])
X21_4 <- c(x2[,1], x2[,2], x2[,3], x2[,4])
M1_4 <- stan_glm(Y1_4 ~ X11_4 + X21_4, family=binomial(link="logit") )
M1_4$coefficients[3]
M1_4$ses[3]
Y1_5 <- c(y[,1], y[,2], y[,3], y[,4], y[,5])
X11_5<- c(x1[,1], x1[,2], x1[,3], x1[,4], x1[,5])
X21_5 <- c(x2[,1], x2[,2], x2[,3], x2[,4], x2[,5])
## fit the fifth
#  1) informative analysis
M4_5_inf <- stan_glm(y[,5] ~ x1[,5] + x2[,5], family=binomial(link="logit"),
prior =normal(c(0, as.double(M1_4$coefficients[3]) ),
c(2.5, as.double(M1_4$ses[3]))))
print(M4_5_inf)
posterior_45_inf <- as.matrix(M4_5_inf)
# 2) weakly informative analysis
M4_5_weakinf <- stan_glm(y[,5] ~ x1[,5] + x2[,5], family=binomial(link="logit"))
posterior_45_weakinf <- as.matrix(M4_5_weakinf)
print(M4_5_weakinf)
beta_45_names <- c()
beta_45_names[1] <- expression(alpha)
beta_45_names[2]<-expression(beta[1])
beta_45_names[3]<-expression(beta[2])
gl_45_posterior <- cbind(posterior_45_inf, posterior_45_weakinf)
source("separation_function.R")
input <- 0
# scale the predictors
x1 <-(x1[,5]-mean(x1[,5]))/(2*sd(x1[,5]))
x2 <- x2[,5]
x <- cbind(x1, x2)
# compute psi
res_prior_mix <- prior_pred_mix(y = y[,5], N=n, S=10000,
x1 = x1, x2 = x2,
prior_inf_location = input,
prior_noninf_location = input,
prior_inf_sd = 1,
prior_noninf_sd = 2.5,
threshold = 0.05)
data_mix <- list(y = y[,5], N=n,
x= x,
prior_inf_location = input,
prior_noninf_location = input,
psi =res_prior_mix$psi,
prior_inf_sd = 1,
prior_noninf_sd =2.5)
M4_5_mix  <-stan(file = "separation_mix.stan",
data= data_mix, chains =4,
iter = 2000)
fit_egidi <- extract(M4_5_mix)
print(M4_5_mix)
posterior_45_mix <- as.matrix(M4_5_mix)
posterior_45_mix <- as.matrix(M4_5_mix)
## Fig. 2
# a
pdf(file="images/fifth_exp_inf.pdf", width =9, height =8)
mcmc_areas(posterior_45_inf,
pars=c("(Intercept)", "x1[, 5]", "x2[, 5]"))+
xaxis_text(on =TRUE, size=rel(2.9))+
yaxis_text(on =TRUE, size=rel(2.9))+
scale_y_discrete(labels = ((parse(text=beta_45_names ))))+
ggtitle("Informative analysis")+
theme(plot.title = element_text(hjust = 0.5, size =rel(2.6)))
dev.off()
# b
pdf(file="images/fifth_exp_weakinf.pdf", width =9, height =8)
mcmc_areas(posterior_45_weakinf,
pars=c("(Intercept)",  "x1[, 5]", "x2[, 5]"))+
xaxis_text(on =TRUE, size=rel(2.9))+
yaxis_text(on =TRUE, size=rel(2.9))+
scale_y_discrete(labels = ((parse(text=beta_45_names ))))+
ggtitle("Weakly informative analysis")+
theme(plot.title = element_text(hjust = 0.5, size =rel(2.6)))
dev.off()
## Fig 3
pdf(file="images/fifth_exp_mix.pdf", width =9, height =8)
mcmc_areas(posterior_45_mix,
pars=c( "alpha", "beta[1]", "beta[2]"))+
xaxis_text(on =TRUE, size=rel(2.9))+
yaxis_text(on =TRUE, size=rel(2.9))+
scale_y_discrete(labels = ((parse(text=beta_45_names ))))+
ggtitle("Mixture analysis")+
theme(plot.title = element_text(hjust = 0.5, size =rel(2.6)))
dev.off()
dim(sim$subgroup)
dim(sim$subgroups)
