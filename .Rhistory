mu_pre_switch <- array(rep(0, true.iter*D*k), dim=c(true.iter,D,k))
for (i in 1:true.iter)
mu_pre_switch[i,,] <- t(sm[i,,])
}
mcmc_mean_raw = mu_pre_switch_compl
mcmc_weight_raw = prob.st
mcmc_sd_raw = tau
group <- sims_biv$z[numeffettivogruppi==k,]
mu <- mu_pre_switch
tau <- sims_biv$L_sigma[numeffettivogruppi==k, ]
prob.st <- sims_biv$theta[numeffettivogruppi==k,]
FreqGruppiJags <- table(group)
model_code <- mix_biv
}
group.orig <- group
verigruppi <- as.double(names(table(group)))
prob.st <- prob.st[,verigruppi]
mu <- mu[,,verigruppi]
#tau <- tau[,verigruppi]
# Switching Post
cont <- 0
for (l in verigruppi){
cont <- cont+1
group.orig[group==l] <- cont
}
k.orig <- k
if (cont > 1){
k <- cont
}
mu_switch  <- array(rep(0, true.iter*D*k), dim=c(true.iter,D,k))
prob.st_switch <-  array(0, dim=c(true.iter,k))
group <- group*0
z <- array(0,dim=c(N, k, true.iter))
for (i in 1:true.iter){
perm <- sample(1:k,k,replace=FALSE)
for (j in 1:k){
#post-processing
group[i,group.orig[i,]==j] <- perm[j]
}
mu_switch[i,,] <- mu[i,,perm]
prob.st_switch[i,] <- prob.st[i,perm]
}
for (i in 1:true.iter){
for (j in 1:N){
z[j,group[i,j],i] <- 1
}
}
mcmc_mean <- mu_switch
mcmc_sd <- tau
mcmc_weight <- prob.st_switch
}
FreqGruppiJagsPERM <- table(group)
Freq <- cbind(FreqGruppiJags,FreqGruppiJagsPERM)
colnames(Freq) <- c("JAGS raw groups", "JAGS post-processed groups")
# Similarity matrix based on MCMC sampling------------------------
nz <- dim(z)[1]
M <- dim(z)[3]
C <- matrix(1,nz,nz)
zm <- apply(z,c(1,3),FUN=function(x) sum(x*(1:length(x))))
for (i in 1:(nz-1)){
for (j in (i+1):nz){
C[i,j] <- sum(zm[i,]==zm[j,])/M
C[j,i] <- C[i,j]
}
}
matdissim <- 1-C
diag(matdissim) <- 0
# Clustering on dissimilarity matrix-------------
if (missing(clustering)){
#clustering <- "diana"
gr  <- diana(matdissim,diss=TRUE)
grr <- cutree(gr, k)
}else if(clustering =="diana"){
gr  <- diana(matdissim,diss=TRUE)
grr <- cutree(gr, k)
}else if(clustering == "hclust"){
gr  <- hclust(as.dist(matdissim))
grr <- cutree(gr, k)
}
available_met <- 3
piv.criterion.choices <- c("maxsumint", "minsumnoint",
"maxsumdiff")
if (missing(piv.criterion)){
piv.criterion <- "maxsumdiff"
}
if (piv.criterion=="maxsumint"||
piv.criterion=="minsumnoint"||
piv.criterion=="maxsumdiff" ){
piv.index <- (1:3)[piv.criterion.choices==piv.criterion]
piv.index.pivotal <- c(1,2,3)
available_met <- 3
x <- c(1:available_met)
clust  <-  piv_sel(C=C, clusters=as.vector(grr))
pivots <- clust$pivots[,piv.index.pivotal[piv.index]]
}else if(piv.criterion=="MUS"){
if (k <=4 & sum(C==0)!=0){
mus_res    <- MUS(C, grr)
clust  <-  mus_res$pivots
}else{
print("maxsumdiff criterion instead of MUS has been adopted due to
computational efficiency")
clust  <-  piv_sel(C=C,  clusters=as.vector(grr))
pivots <- clust$pivots[,3]
}
}
return(list( true.iter = true.iter,
#z=z,
Mu = mu_inits,
#ris=ris,
groupPost=group,
mcmc_mean = mcmc_mean,
mcmc_sd = mcmc_sd,
mcmc_weight = mcmc_weight,
mcmc_mean_raw = mcmc_mean_raw,
mcmc_sd_raw = mcmc_sd_raw,
mcmc_weight_raw = mcmc_weight_raw,
C=C,
grr=grr,
pivots = pivots,
#print = printed,
model = model_code))
}
res <- piv_MCMC(sim$y,k, 300)
library(pivmet)
N  <- 2000
k  <- 3
D <- 4
M1 <- c(-45,8,3,4)
M2 <- c(45,.1,5,6)
M3 <- c(100,8,4,5)
Mu <- rbind(M1,M2,M3)
Sigma.p1 <- diag(D)
Sigma.p2 <- 20*diag(D)
W   <- c(0.2,0.8)
sim <- piv_sim(N = N, k = k, Mu = Mu, Sigma.p1 = Sigma.p1,
Sigma.p2 = Sigma.p2, W = W)
res <- piv_MCMC(sim$y,k, 300)
library(RcmdrMisc)
res <- piv_MCMC(sim$y,k, 300)
library(pivmet)
res <- piv_MCMC(sim$y,k, 300)
library(runjags)
res <- piv_MCMC(sim$y,k, 300)
devtools::document()
library(pivmet)
help(piv_sim)
N  <- 2000
k  <- 3
D <- 4
M1 <- c(-45,8,2,3)
M2 <- c(45,.1,2,4)
M3 <- c(100,8,4 ,5)
Mu <- rbind(M1,M2,M3)
Sigma.p1 <- diag(D)
Sigma.p2 <- 20*diag(D)
W   <- c(0.2,0.8)
sim <- piv_sim(N = N, k = k, Mu = Mu, Sigma.p1 = Sigma.p1,
Sigma.p2 = Sigma.p2, W = W)
res <- piv_MCMC(y=sim$y, k=3, nMC = 300)
N  <- 2000
k  <- 3
D <- 2
M1 <- c(-45,8)
M2 <- c(45,.1)
M3 <- c(100,8)
Mu <- rbind(M1,M2,M3)
Sigma.p1 <- diag(D)
Sigma.p2 <- 20*diag(D)
W   <- c(0.2,0.8)
sim <- piv_sim(N = N, k = k, Mu = Mu, Sigma.p1 = Sigma.p1,
Sigma.p2 = Sigma.p2, W = W)
graphics::plot(sim$y, xlab="y[,1]", ylab="y[,2]")
res <- piv_MCMC(y=sim$y, k=3, nMC = 300)
N  <- 2000
k  <- 3
D <- 4
M1 <- c(-45,8,2,3)
M2 <- c(45,.1,2,4)
M3 <- c(100,8,4 ,5)
Mu <- rbind(M1,M2,M3)
Sigma.p1 <- diag(D)
Sigma.p2 <- 20*diag(D)
W   <- c(0.2,0.8)
sim <- piv_sim(N = N, k = k, Mu = Mu, Sigma.p1 = Sigma.p1,
Sigma.p2 = Sigma.p2, W = W)
res <- piv_MCMC(y=sim$y, k=3, nMC = 300)
rel <- piv_rel(res)
rel <- piv_rel(res)
devtools::document()
help(piv_MCMC)
rel <- piv_rel(res)
help(piv_sim)
help(piv_MCMC)
devtools::document()
help(piv_MCMC)
devtools::document()
help(piv_rel)
help(piv_MCMC)
res$mcmc_mean_raw
dim(res$mcmc_mean_raw)
dim(res$mcmc_mean)
library(pivmet)
rel <- piv_rel(res)
rel$rel_mean
help(piv_rel)
piv_plot(y=sim$y, mcmc=res, rel_est = rel, type="chains")
devtools::document()
help(piv_rel)
N <- 200
k <- 3
D <- 2
nMC <- 5000
M1  <- c(-.5,8)
M2  <- c(25.5,.1)
M3  <- c(49.5,8)
Mu  <- matrix(rbind(M1,M2,M3),c(k,2))
Sigma.p1 <- diag(D)
Sigma.p2 <- 20*diag(D)
W <- c(0.2,0.8)
sim <- piv_sim(N = N, k = k, Mu = Mu,
Sigma.p1 = Sigma.p1,
Sigma.p2 = Sigma.p2, W = W)
res <- piv_MCMC(y = sim$y, k = k, nMC = nMC)
rel <- piv_rel(mcmc = res)
piv_plot(y=sim$y, mcmc=res, rel_est = rel, type="chains")
piv_plot(y=sim$y, mcmc=res, rel_est = rel,
type="hist")
help(piv_plot)
help(piv_MCMC)
N   <- 200
k   <- 4
D   <- 4
nMC <- 300
M1  <- c(-.5,8,2,3)
M2  <- c(25.5,.1,1,2)
M3  <- c(49.5,8,4,5)
M4  <- c(63.0,.1,5,6)
Mu  <- rbind(M1,M2,M3,M4)
Sigma.p1 <- diag(D)
Sigma.p2 <- 20*diag(D)
W <- c(0.2,0.8)
sim <- piv_sim(N = N, k = k, Mu = Mu,
Sigma.p1 = Sigma.p1,
Sigma.p2 = Sigma.p2, W = W)
res_stan <- piv_MCMC(y = sim$y, k =k, nMC = nMC,
software ="rstan")
rel <- piv_rel(res_stan)
rel$rel_mean
library(rstanarm)
data(roaches)
# Rescale
roaches$roach1 <- roaches$roach1 / 100
# Estimate original model
glm1 <- glm(y ~ roach1 + treatment + senior, offset = log(exposure2),
data = roaches, family = poisson)
# Estimate Bayesian version with stan_glm
stan_glm1 <- stan_glm(y ~ roach1 + treatment + senior, offset = log(exposure2),
data = roaches, family = poisson,
prior = normal(0, 2.5, autoscale=FALSE),
prior_intercept = normal(0, 5, autoscale=FALSE),
seed = 12345)
glm1
stan_glm1
help(rstan)
help("stan")
library(rstan)
scode <- "
parameters {
real y[2];
}
model {
y[1] ~ normal(0, 1);
y[2] ~ double_exponential(0, 2);
}
"
fit1 <- stan(model_code = scode, iter = 10, verbose = FALSE)
print(fit1)
fit1
fit1
N   <- 200
k   <- 4
D   <- 4
nMC <- 300
M1  <- c(-.5,8,2,3)
M2  <- c(25.5,.1,1,2)
M3  <- c(49.5,8,4,5)
M4  <- c(63.0,.1,5,6)
Mu  <- rbind(M1,M2,M3,M4)
Sigma.p1 <- diag(D)
Sigma.p2 <- 20*diag(D)
W <- c(0.2,0.8)
sim <- piv_sim(N = N, k = k, Mu = Mu,
Sigma.p1 = Sigma.p1,
Sigma.p2 = Sigma.p2, W = W)
library(pivmet)
N   <- 200
k   <- 4
D   <- 4
nMC <- 300
M1  <- c(-.5,8,2,3)
M2  <- c(25.5,.1,1,2)
M3  <- c(49.5,8,4,5)
M4  <- c(63.0,.1,5,6)
Mu  <- rbind(M1,M2,M3,M4)
Sigma.p1 <- diag(D)
Sigma.p2 <- 20*diag(D)
W <- c(0.2,0.8)
sim <- piv_sim(N = N, k = k, Mu = Mu,
Sigma.p1 = Sigma.p1,
Sigma.p2 = Sigma.p2, W = W)
res <- piv_MCMC(sim$y, 4, 300)
library(pivmet)
N   <- 200
k   <- 4
D   <- 4
nMC <- 300
M1  <- c(-.5,8,2,3)
M2  <- c(25.5,.1,1,2)
M3  <- c(49.5,8,4,5)
M4  <- c(63.0,.1,5,6)
Mu  <- rbind(M1,M2,M3,M4)
Sigma.p1 <- diag(D)
Sigma.p2 <- 20*diag(D)
W <- c(0.2,0.8)
sim <- piv_sim(N = N, k = k, Mu = Mu,
Sigma.p1 = Sigma.p1,
Sigma.p2 = Sigma.p2, W = W)
res <- piv_MCMC(sim$y, 4, 300)
res$stanfit
res <- piv_MCMC(y=sim$y, k=4, nMC = 300, software = "rstan")
res$stanfit
devtools::document()
posterior <- as.array(res$stanfit)
library(bayesplot)
mcmc_intervals(posterior)
mcmc_intervals(posterior, pars=c("mu"))
posterior
names(posterior)
mcmc_intervals(posterior, regex_pars=c("mu"))
mcmc_intervals(posterior, regex_pars=c("theta"))
help(piv_MCMC)
devtools::document()
help(piv_MCMC)
help(piv_MCMC)
devtools::document()
help(piv_MCMC)
devtools::document()
help(piv_MCMC)
help(piv_MCMC)
devtools::document()
devtools::document()
help(piv_MCMC)
help(piv_sel)
help(piv_KMeans)
N  <- 620
k  <- 3
n1 <- 20
n2 <- 100
n3 <- 500
x  <- matrix(NA, N,2)
truegroup <- c( rep(1,n1), rep(2, n2), rep(3, n3))
x[1:n1,] <- rmvnorm(n1, c(1,5), sigma=diag(2))
x[(n1+1):(n1+n2),] <- rmvnorm(n2, c(4,0), sigma=diag(2))
x[(n1+n2+1):(n1+n2+n3),] <- rmvnorm(n3, c(6,6), sigma=diag(2))
# Apply piv_KMeans with MUS as pivotal criterion
res <- piv_KMeans(x, k)
res2 <- piv_KMeans(x, k, piv.criterion ="maxsumdiff")
# Plot the data and the clustering solution
par(mfrow=c(1,2), pty="s")
colors_cluster <- c("grey", "darkolivegreen3", "coral")
colors_centers <- c("black", "darkgreen", "firebrick")
graphics::plot(x, col = colors_cluster[truegroup],
bg= colors_cluster[truegroup], pch=21, xlab="x[,1]",
ylab="x[,2]", cex.lab=1.5,
main="True data", cex.main=1.5)
graphics::plot(x, col = colors_cluster[res$cluster],
bg=colors_cluster[res$cluster], pch=21, xlab="x[,1]",
ylab="x[,2]", cex.lab=1.5,
main="piv_KMeans", cex.main=1.5)
points(x[res$pivots, 1], x[res$pivots, 2],
pch=24, col=colors_centers,bg=colors_centers,
cex=1.5)
points(res$centers, col = colors_centers[1:k],
pch = 8, cex = 2)
help(piv_plot)
help(piv_MCMC)
help(piv_rel)
devtools::document()
library(bayesmix)
data(fish)
y <- fish[,1]
k <- 5
res2 <- piv_MCMC(y = y, k = k, nMC = 3000,
software = "rstan")
devtools::document()
library(pivmet)
help(piv_MCMC)
help(piv_MCMC)
N   <- 200
k   <- 4
D   <- 2
nMC <- 1000
M1  <- c(-.5,8)
M2  <- c(25.5,.1)
M3  <- c(49.5,8)
M4  <- c(63.0,.1)
Mu  <- rbind(M1,M2,M3,M4)
Sigma.p1 <- diag(D)
Sigma.p2 <- 20*diag(D)
W <- c(0.2,0.8)
sim <- piv_sim(N = N, k = k, Mu = Mu,
Sigma.p1 = Sigma.p1,
Sigma.p2 = Sigma.p2, W = W)
res_stan <- piv_MCMC(y = sim$y, k =k, nMC = nMC,
software ="rstan")
res_stan <- piv_MCMC(y = sim$y, k =k, nMC = nMC,
software ="rstan", priors = list(tau_sigma=4, epsilon=4))
devtools::document()
names <- c("Leo", "Enrico", "Pando", "BB")
squadre_alte  <- c("Barcellona", "Man. United", "Inter",
"Liverpool", "Real Madrid",
"Chelsea", "Milan", "Bayern Monaco",
"Arsenal")
squadre_medie <- c("Roma", "Fiorentina",
"Valencia", "Napoli",
"Man City", "PSG", "Fenherbace")
squadre_basse <- c("Reggina", "Lecce", "Chievo",
"Lilla", "Middlesbrough",
"Athletic Bilbao")
#Turno 1
team1 <- c("Leo", "Enrico")
team2 <- c("Pando", "BB")
team1_gol <- 2
team2_gol <- 1
rank_f <- function(team1_gol, team2_gol, team1, team2,
rank_in = rep(0,4), dr = rep(0,4)){
rank <- rank_in
dr <- dr
if (team1_gol > team2_gol){
rank[(1:4)[names==team1[1]]] <- rank[(1:4)[names==team1[1]]]+3
rank[(1:4)[names==team1[2]]] <- rank[(1:4)[names==team1[2]]]+3
rank[(1:4)[names==team2[1]]] <- rank[(1:4)[names==team2[1]]]
rank[(1:4)[names==team2[2]]] <- rank[(1:4)[names==team2[2]]]
}else if (team1_gol < team2_gol){
rank[(1:4)[names==team1[1]]] <- rank[(1:4)[names==team1[1]]]
rank[(1:4)[names==team1[2]]] <- rank[(1:4)[names==team1[2]]]
rank[(1:4)[names==team2[1]]] <- rank[(1:4)[names==team2[1]]]+3
rank[(1:4)[names==team2[2]]] <- rank[(1:4)[names==team2[2]]]+3
}else{
rank[(1:4)[names==team1[1]]] <- rank[(1:4)[names==team1[1]]]+1
rank[(1:4)[names==team1[2]]] <- rank[(1:4)[names==team1[2]]]+1
rank[(1:4)[names==team2[1]]] <- rank[(1:4)[names==team2[1]]]+1
rank[(1:4)[names==team2[2]]] <- rank[(1:4)[names==team2[2]]]+1
}
return(rank)
}
rank1<-rank_f(team1_gol, team2_gol, team1, team2,
rank)
cbind(names,rank1)
# Turno 2
team1 <- c("BB", "Enrico")
team2<- c("Pando", "Leo")
team1_gol <- 3
team2_gol <- 3
rank2<-rank_f(team1_gol, team2_gol, team1, team2,
rank1)
cbind(names,rank2)
# Turno 3
team1 <- c("BB", "Leo")
team2<- c("Pando", "Enrico")
team1_gol <- 3
team2_gol <- 4
rank3<-rank_f(team1_gol, team2_gol, team1, team2,
rank2)
cbind(names,rank3)
#Turno 4
team1 <- c("Leo", "Enrico")
team2 <- c("Pando", "BB")
team1_gol <- 2
team2_gol <- 1
rank4<-rank_f(team1_gol, team2_gol, team1, team2,
rank3)
cbind(names,rank4)
# Turno 5
team1 <- c("BB", "Enrico")
team2<- c("Pando", "Leo")
team1_gol <- 3
team2_gol <- 3
rank5<-rank_f(team1_gol, team2_gol, team1, team2,
rank4)
cbind(names,rank5)
# Turno 6
team1 <- c("BB", "Leo")
team2<- c("Pando", "Enrico")
team1_gol <- 3
team2_gol <- 4
rank6<-rank_f(team1_gol, team2_gol, team1, team2,
rank5)
cbind(names,rank6)
cbind(names,rank6)
c(squadre_alte, squadre_medie, squadre_basse)[sample(1, 3)]
library(pivmet)
library(pivmet)
help(piv_MCMC)
help(stan_glmer)
help(rstanarm::stan_glmer)
library(rstanarm)
help(stan_glmer)
devtools::document()
devtools::document()
devtools::release()
setwd("C:/Users/leoeg/Dropbox/Corsi esterni, app, materiale vario/CorsiGenerali/moduloC/R")
